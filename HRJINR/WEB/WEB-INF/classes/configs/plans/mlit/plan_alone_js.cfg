TEMPLATE


[comments]
    author=Семашко
[end]

[draw rooms]
var phones = [
];

var check_sel;
var minimX = 1000000;
var maximX = -1000000;
var che;
var minimY = 1000000;
var maximY = -1000000;
var defaultDivColor = "##eeee00"
function toColor(num) {
    let out = ' ##'  + (+num).toString(16).padStart(6, '0');;
    return out;
}


function try_colorSQR(){
	let divs = lit.attributes.Departments;
 	for (i in divs){
            let divsqr;
            let sqrid='SQR'+divs[i].id;
            divsqr = document.getElementById(sqrid);
            if ( typeof(divsqr) !== "undefined" && divsqr !== null ) {
                 divsqr.style["background-color"]= toColor(divs[i].systemColor);
                 console.log('COLOR SQR '+sqrid+' '+JSON.stringify(divs[i])+' '+toColor( divs[i].systemColor));
                 console.log(toColor( divs[i].systemColor));
            }
            if (divs[i].id!=='643000'){continue;}
            sqrid='SQR606000';
            divsqr = document.getElementById(sqrid);
            if ( typeof(divsqr) !== "undefined" && divsqr !== null ) {
                 divsqr.style["background-color"]= toColor(divs[i].systemColor);
                 console.log('COLOR SQR '+sqrid+' '+JSON.stringify(divs[i])+' '+toColor( divs[i].systemColor));
                 console.log(toColor( divs[i].systemColor));
            }



		
    }
}
var a = {"Ё":"YO","Й":"I","Ц":"TS","У":"U","К":"K","Е":"E","Н":"N","Г":"G","Ш":"SH","Щ":"SCH","З":"Z","Х":"H","Ъ":"'","ё":"yo","й":"i","ц":"ts","у":"u","к":"k","е":"e","н":"n","г":"g","ш":"sh","щ":"sch","з":"z","х":"h","ъ":"'","Ф":"F","Ы":"I","В":"V","А":"А","П":"P","Р":"R","О":"O","Л":"L","Д":"D","Ж":"ZH","Э":"E","ф":"f","ы":"i","в":"v","а":"a","п":"p","р":"r","о":"o","л":"l","д":"d","ж":"zh","э":"e","Я":"Ya","Ч":"CH","С":"S","М":"M","И":"I","Т":"T","Ь":"'","Б":"B","Ю":"YU","я":"ya","ч":"ch","с":"s","м":"m","и":"i","т":"t","ь":"'","б":"b","ю":"yu"};

function transliterate(word){
  return word.split('').map(function (char) { 
    return a[char] || char; 
  }).join("");
}
function getRoomPhone(roomName){
    let phlist = '';
    let roomn = transliterate(roomName.toLowerCase());
    for (i in phones){
        let r = phones[i].room;
        if (roomn.trim() == r){
            if (phlist.length>0){
                phlist +=  ', ';
            }
            phlist +=  phones[i].number;
        }
    }
    
    return phlist;
}


function getDivProp(div_code){
	let divs = lit.attributes.Departments;
 	for (i in divs){
//		console.log(i+' '+divs[i].id+' '+divs[i].name+' '+divs[i].systemColor);
		if (divs[i].id == div_code) {return divs[i]};
        }
	
	return "";
}

function showSotr(tabn){
 ShowDialog(); AjaxCall('popupCont', 'c=edit/personal&edit=no&tab_n='+tabn, true); ??right_level=333|pers_admin|personal_view
}


function getRoomCoordinates(roomData){
    let roomCoordinates = [];
    for (var j = 0; j < roomData.geometry.coordinates.length; j++) {
      roomCoordinates.push([
        rescaleY(roomData.geometry.coordinates[j][1]),
        rescaleX(roomData.geometry.coordinates[j][0]),
      ]);
    }
    return roomCoordinates;
}
function getRoomInfo(roomID){
    return rooms_info[roomID];
}

        function checki(select) {
        check_sel = -1;
//          console.log(check_sel);
          che = check_sel;
          if (check_sel == -1) {
            che = 0;
          }
          //alert("Вы выбрали " + check_sel + " этаж");
          for (j in lit.layers.Buildings.layerRaws) {
            //                console.log(j);
            if (lit.layers.Buildings.layerRaws[j].geometry.floor == check_sel) {
              var i = lit.layers.Buildings.layerRaws[j];
              //                    console.log(' I = ' + i);

              //                    console.log('floor=' + i.geometry.floor);
              for (coord_num in i.geometry.coordinates) {
//                console.log(
//                  "coord x1=" +
//                    i.geometry.coordinates[coord_num][0] +
//                    " y1=" +
//                    i.geometry.coordinates[coord_num][1]
//                );
                if ((+i.geometry.coordinates[coord_num][0]) > maximX) {
                  maximX = i.geometry.coordinates[coord_num][0];
                }
                if (+i.geometry.coordinates[coord_num][0] < minimX) {
                  minimX = i.geometry.coordinates[coord_num][0];
                }
                if (+i.geometry.coordinates[coord_num][1] > maximY) {
                  maximY = i.geometry.coordinates[coord_num][1];
                }
                if (+i.geometry.coordinates[coord_num][1] < minimY) {
                  minimY = i.geometry.coordinates[coord_num][1];
                }
              }
            }
          }
          console.log("X ", minimX, maximX);
          console.log("Y ", minimY, maximY);
        }

function fill_rooms_info(){
    let all_rooms_data = lit.layers.Rooms.layerRaws;
    rooms_info = {};
    var arr = [];
    for (let i = 0; i < all_rooms_data.length; i++){
        var room_id = all_rooms_data[i].properties.id;
        var room_name = all_rooms_data[i].properties.name.toUpperCase() ;
        var room_floor = all_rooms_data[i].geometry.floor;
        var ppls_arr = []
        for (let j = 0; j < lit_sotr.length; j++){
            let tmprooms = [lit_sotr[j].rooms.trim().toUpperCase()];
            if (lit_sotr[j].rooms.indexOf(',')>-1) {
                tmprooms = lit_sotr[j].rooms.toUpperCase().split(',');
                tmprooms.map(s => s.trim());
            }
            if (  ( lit_sotr[j].rooms.indexOf('403')>-1 ) & (room_name.indexOf('403')>-1 ) )
                          { 
                           console.log('=================================== '+room_name+' '+ tmprooms+' '+ tmprooms.indexOf(room_name));
                           }
            if (tmprooms.indexOf(room_name) > -1){
                let fio = lit_sotr[j].f + " " + lit_sotr[j].i + " " + lit_sotr[j].o;
                ppls_arr.push({"FL_ID":lit_sotr[j].fl_id, "TABN":lit_sotr[j].tabn, "TOPDIVCODE":lit_sotr[j].TopParent_code, "FIO":fio});
            }
        }
        var room_coord = getRoomCoordinates(all_rooms_data[i]);
        var minX = maxX = room_coord[0][0];
        var minY = maxY = room_coord[0][1];
        for (let b = 0; b < room_coord.length; b++){
            if (room_coord[b][0] < minX){
                minX = room_coord[b][0];
            }
            if (room_coord[b][0] > maxX){
                maxX = room_coord[b][0];
            }
            if (room_coord[b][1] < minY){
                minY = room_coord[b][1];
            }
            if (room_coord[b][1] > maxY){
                maxY = room_coord[b][1];
            }
        }
        var square = ((maxX - minX) * (maxY - minY) * 13 * 13) / 100;
        var size = 0;
        rooms_info[room_id] = {"id":room_id, "name":room_name, "floor":room_floor, "PPLS":ppls_arr, "SQR":square, "size":size, "geo_json":room_coord};
    //    if (room_name.indexOf('607')>-1) {console.log(   room_name+' ===   '+JSON.stringify(rooms_info[room_id]));}
    }
}




function centerRoom(room_num){
   if (room_num.length<2) {
        return;
    }
    
   let aa = $('[id='+room_num[0]+'][name=floornum]');
   console.log(room_num[0]) 
   aa.click();
   addRooms();
   for (r in rooms_info){
    console.log(room_num+' '+r+' '+rooms_info[r].name+' '+rooms_info);
    if (rooms_info[r].name == room_num.toUpperCase()){
        console.log('!!!!!!!!!! '+JSON.stringify(rooms_info[r].geo_json));
	let geo = [0,0];
	for (i in rooms_info[r].geo_json) {
		geo[0] += rooms_info[r].geo_json[i][0];
		geo[1] += rooms_info[r].geo_json[i][1];
		console.log('CENTER ROOM !!!!!!!!!!!!!!!!! ' +geo + '  '+i+'= '+rooms_info[r].geo_json[i])
	}
	geo[0] /=  rooms_info[r].geo_json.length;
	geo[1] /=  rooms_info[r].geo_json.length ;
	console.log(geo + '  '+rooms_info[r].geo_json.length );
        red_mark.setLatLng(geo);
        roomsGrp.addLayer(red_mark);
        lit_map.panTo(geo)
        break;
    }
   } 
    
}
var flip = false;
        function loadBuildingPlan(building_id, func) {
            console.log('fectch');
            let url = 'https://LT-SVR230.jinr.ru:8082/get_building_inform_v2?' + "building_id=" + building_id.toString();
            fetch(url)
                .then((response) => {
                    if (response.ok) {
                        console.log('load connected ');
                        return response.text();
                    } else {
                        console.log('load failed');
                    }
                })
                .then((text) => {
                      console.log('1!!!!!!!!!!!!!!!!!!!!'+lit_sotr.length)

                        console.log('call func '+text);
                    func(text);
                });
        }

      function addRooms() {
        console.log('new addRooms()');
/*
        floor_num = document.getElementById("selectFloorId");
        floor_num = floor_num.options[floor_num.selectedIndex].text;
        build_id = document.getElementById("select_get_building_id");
        build_id = build_id.options[build_id.selectedIndex].value;
        document.getElementById("create_room").checked = false;
        document.getElementById("create_icon").checked = false;

        for (let i = 0; i < poly_data.length; i++) {
          poly_data[i].remove();
        }
        poly_data = [];
        data_array = [];
        loadUserBuildingObject(build_id, floor_num, "rooms", callBackFunc);
*/
        floor_num = $("input[type='radio'][name='floornum']:checked").val();
        loadBuildingPlan(#build_id#, callBackFunc);

      }

      function callBackFunc(data) {
        // console.log("callBackFunc" + JSON.stringify(data));
        if (data.length != undefined && data.length != 0) {
            lit = JSON.parse(data);
//        checki();

            addRooms_draw()
        } else {
          // alert("для текущего этажа нет комнат");
        }
      }




function addRooms_draw() {
  fill_rooms_info();

  roomsGrp.clearLayers();
  console.log(' 111 addRooms '+roomsGrp +' lit='+ 'JSON.stringify(lit)');
  check_sel = $("input[type='radio'][name='floornum']:checked").val();
  let aaa = $("input[type='radio'][name='floornum']:checked");
  console.log('aaa='+aaa);
  let data = lit.layers.Rooms.layerRaws.filter(function (item, i, arr) {
    if (item.geometry.floor == check_sel) return item;
  });
//  console.log(check_sel+' Rooms '+ JSON.stringify(data));

  for (var i = 0; i < data.length; i++) {
//     console.log(' Room '+data[i].properties.name+' '+ JSON.stringify(data[i].geometry.coordinates));
    let latlngs = getRoomCoordinates(data[i]);
    var rColor = "##eeeeee";
    var roomName = data[i].properties.name;
    var descr = "";
    var Owner = "";
    var room_info = getRoomInfo(data[i].properties.id);
    if (roomName != ""){
        var descr = "<LNG L=ru>Комната</LNG>: "+ roomName+"<br>";
        let roomPhone = getRoomPhone(roomName);
        if (roomPhone.length>2){
            descr+="<LNG L=ru>Телефон</LNG>: "+ roomPhone+"<br>";
        }
//        console.log(latlngs);
        for (let j = 0; j < room_info.PPLS. length; j++){
            descr += "<a href='##' onclick='showSotr(+" + room_info.PPLS[j].TABN + ")';>"+room_info.PPLS[j].FIO + "</a><br>";
            Owner = room_info.PPLS[j].TOPDIVCODE;
//            console.log(roomName+' = '+JSON.stringify(room_info.PPLS[j])+' '+Owner);
        }
        if (Owner != "") {
               descr += "Отдел: " + divFunc(Owner) + "<br>";
               console.log('getDivProp '+JSON.stringify(getDivProp(Owner)));
               rColor = toColor((+getDivProp(Owner).systemColor));
        }
        
    }
        descr += "Площадь: " + parseInt(room_info.SQR)+' кв.м';


    console.log(roomName+' '+rColor)
    polyline = L.polygon(latlngs, {
      fillColor: rColor,
      fillOpacity: 0.9,
      color: "black",
      weight: 1,
    });

    polyline.bindTooltip(roomName, {
        permanent: true,
        direction: "center",
        className: "lhep_obj_tooltip",
      })
      .openTooltip();
    polyline.bindPopup(descr, {
      autoPanPaddingTopLeft: [50, 50],
      className: "lhep_obj_popup",
    }).on;
    roomsGrp.addLayer(polyline);
    room_info.geo_json = latlngs;
   console.log(' polyline '+latlngs+' '+JSON.stringify(room_info));
  }
try_colorSQR();

}

function test_room(){
  var latlngs = [
    [1, 1],
    [200, 200],
    [1, 300],
  ];
  polyline = L.polygon(latlngs, {
    fillOpacity: 1,
    color: "red",
    weight: 2,
  }).addTo(lit_map);
}


function rescaleX(x) {
    let aaa = x / 100;
  return parseInt(aaa);
}

function rescaleY(y) {
    let aaa = (minimY - (y - maximY)) / 100;
    return parseInt(aaa);
}


[end]
