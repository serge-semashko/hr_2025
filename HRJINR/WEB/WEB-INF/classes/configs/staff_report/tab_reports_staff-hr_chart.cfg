tab_reports_chart.cfg

[comments]
descr=Графики сводных отчетов
input=none
output=HTML таблица объектов
parents=
author:Семашко С.
[end]
service=dubna.walt.service.TableServiceSpecial ??

[parameters]
request_name=U:Список документов
LOG=ON 
tableCfg=table_no
[end]

$INCLUDE dat/common.dat[rowLinks]

[get total sotr stavka]
    select count(*) as persons_count,  round(sum(stavka),2) as stavka_count 
    from sotrudniki sotr
    $INCLUDE utils.cfg[criteria] 
[end]
[total sotr table]
    $GET_DATA [get total sotr stavka]
    <table border=1 cellpadding=5 cellspacing=0>
    </br>
    <tr>
        $GET_DATA [get Totals]
        <td class="label">
            Количество ставок:
        </td><td>
            #stavka_count#
        </td>
        <td class="label">
            Количество человек:
        </td><td>
            #persons_count#
        </td>

    </tr>
    </table>
[end]

[get 1c payment]
select month(CURRENT_TIMESTAMP) -1 as month_cnt;
    SELECT concat(
	'"',
	trim(tabn),'_',
	month(n.period),'"',
	':',
    sum(rezultat) ,
	','

	)  as json_sum_month_1c
    FROM [DB_1C_2].[1c8_2].[LHE_Nachisleniya] n 
    where month(n.period) <=month(CURRENT_TIMESTAMP)
    group by n.Tabn ,month(n.period)
  order by n.Tabn;


    
SELECT concat(
	tabn,':',
    sum(rezultat) ,
	','
	)  as json_stimul_1c
    FROM [DB_1C_2].[1c8_2].[LHE_Nachisleniya] n 
    where  month(n.period) <=month(CURRENT_TIMESTAMP) and
    VidRascheta in 
        $INCLUDE tab_reports_chart[stimul entries]
    group by n.Tabn
    ;

SELECT concat(
	tabn,':',
    sum(rezultat) ,
	','
	)  as json_fzp_1c
    FROM [DB_1C_2].[1c8_2].[LHE_Nachisleniya] n 
    where  month(n.period) <=month(CURRENT_TIMESTAMP) and
        VidRascheta in 
        $INCLUDE tab_reports_chart[FZP entries]
    group by n.Tabn
    ;
    
SELECT concat(
	tabn,':',
    sum(rezultat) ,
	','
	)  as json_bonus_1c
    FROM [DB_1C_2].[1c8_2].[LHE_Nachisleniya] n 
    where  month(n.period) <=month(CURRENT_TIMESTAMP) and
    VidRascheta in 
        $INCLUDE tab_reports_chart[BONUS entries]
    group by n.Tabn
    ;
    SELECT concat(
	tabn,':',
    sum(rezultat) ,
	','
	)  as json_quartbonus_1c
    FROM [DB_1C_2].[1c8_2].[LHE_Nachisleniya] n 
    where  month(n.period) <=month(CURRENT_TIMESTAMP) and
    VidRascheta in ('Квартальная премия ЛФВЭ')
    group by n.Tabn
    ;
    
SELECT concat(
	tabn,':',
    sum(rezultat) ,
	','
	)  as json_prochee_1c
    FROM [DB_1C_2].[1c8_2].[LHE_Nachisleniya] n 
    where  month(n.period) <=month(CURRENT_TIMESTAMP) and
        VidRascheta in 
        $INCLUDE tab_reports_chart[prochee entries]
    group by n.Tabn
    ;
    SELECT concat(
	tabn,':',
    sum(rezultat) ,
	','
	)  as json_otpusk_1c
    FROM [DB_1C_2].[1c8_2].[LHE_Nachisleniya] n 
    where  month(n.period) <=month(CURRENT_TIMESTAMP) and
        VidRascheta in 
        $INCLUDE tab_reports_chart[otpusk entries]
    group by n.Tabn
    ;
select concat('<tr><td>',VidRascheta, '</td><td>',cast(round(sum(n.Rezultat)/1000,0) as int),'</td></tr>')  as pay_missed  FROM [DB_1C_2].[1c8_2].[LHE_Nachisleniya] n
    where  month(n.period) <=month(CURRENT_TIMESTAMP) and
    VidRascheta not in  
        $INCLUDE tab_reports_chart[stimul entries]
    and  VidRascheta not in  
        $INCLUDE tab_reports_chart[FZP entries]
    and  VidRascheta not in  
        $INCLUDE tab_reports_chart[BONUS entries]
    and  VidRascheta not in  
        $INCLUDE tab_reports_chart[otpusk entries]
    and  VidRascheta not in  
         ('Квартальная премия ЛФВЭ')
    and  VidRascheta not in  
        $INCLUDE tab_reports_chart[prochee entries]
    and  VidRascheta not in  
        $INCLUDE tab_reports_chart[otpusk entries]
group by  n.VidRascheta
order by sum(n.Rezultat) desc

;

[end]
[report]
  $USE_DB 1C ??
    $GET_DATA [get 1c payment]??
$LOG2 !!!!! pay_missed #pay_missed# <br> ??
  $USE_DB 
    $INCLUDE [report header]
    $INCLUDE [report footer]
[end]
[create top divs data]
    
[end]
[report header]
<style>
.graphContainer:{
    width:800px;
    height:500px;
    margin-top:10px;
    color:black;
    border: solid 3px black;
}
</style>

    $INCLUDE [total sotr table]   ??!XL=Y
    $INCLUDE [total table]   ??!XL=Y




$INCLUDE [неучтенные виды расчетов] ??

[end]

[total table]
    $GET_DATA [get full]
    $GET_DATA [get Totals] 
[end]

[1c process]
$JS{
        _$LOG(2,'0  <br>')
        var data_1c={#json_sum_1c#};
        var data_1c={#json_sum_month_1c#};
            var stimul_1c = {#json_stimul_1c#};
            var fzp_1c = {#json_fzp_1c#};
            var bonus_1c = {#json_bonus_1c#};
            var quartbonus_1c = {#json_quartbonus_1c#};
            var prochee_1c = {#json_prochee_1c#};
            var otpusk_1c = {#json_otpusk_1c#};
            var month_cnt = +#month_cnt#;
            var d_category = #d_category#;
            var d_post = #d_post#;
            var d_otdelenie_age_salary=#d_otdelenie_age_salary#;
            var d_full_lab=#d_full_lab#;
            if (month_cnt<1){month_cnt = 1};
        _$LOG(2,'1  <br>')

            
        var topnames=[];
        var topnames = #d_otdelenie#;
        _$LOG(2,'@@@@@month_cnt='+month_cnt+' topnames !!!!!!!!!!!{'+topnames+ '  - '+JSON.stringify(topnames)+'<br>')
        _$LOG(2,' d_full_lab='+JSON.stringify(d_full_lab)+'<br>')
        var full_sum = 0,
            full_stimul = 0,
            full_fzp = 0,
            full_bonus = 0,
            full_quartbonus = 0,
            full_prochee = 0,
            full_otpusk = 0,

            full_rabochie = 0,
            full_nauch = 0,
            full_spec = 0;
        var tab_cat = '';    
            full_post_dist = {};
            full_cat_dist = {};
            



        for (i in topnames) {
            var name = topnames[i].pname
            _$GET_DATA("SQL:SELECT CONCAT(s.tab_n,',') AS ppls FROM sotrudniki s WHERE s.TopParent_Name='"+name+"'");
            var tabs=prm('ppls').split(',');
            
//            _$LOG(2,name+' tabs !!!!!!!!!!!{'+tabs.length+ '  - '+tabs[0]+' - '+data_1c[tabs[0]]+'}<br>')
            var div_sum = 0,
            div_stimul = 0,
            div_fzp = 0,
            div_bonus = 0,
            div_quartbonus = 0,
            div_prochee = 0,
            div_otpusk = 0,
            div_rabochie = 0,
            div_nauch = 0,
            div_spec = 0;
            
            for (i_otd in d_full_lab){ 
                     if (d_full_lab[i_otd].pname.indexOf(topnames[i].pname)==0) {
                        if (d_full_lab[i_otd].post_dist === undefined) {
                            d_full_lab[i_otd].post_dist = {};
                        }
                        if (d_full_lab[i_otd].cat_dist === undefined) {
                            d_full_lab[i_otd].cat_dist = {};
                        }
                        post_dist = d_full_lab[i_otd].post_dist;
                        cat_dist = d_full_lab[i_otd].cat_dist;
                }
                     if (d_full_lab[i_otd].pname.indexOf('ЛФВЭ')==0) {
                        if (d_full_lab[i_otd].post_dist === undefined) {
                            d_full_lab[i_otd].post_dist = {};
                        }
                        if (d_full_lab[i_otd].cat_dist === undefined) {
                            d_full_lab[i_otd].cat_dist = {};
                        }
                        full_post_dist = d_full_lab[i_otd].post_dist;
                        full_cat_dist = d_full_lab[i_otd].cat_dist;
                }

            }

            
            for (j in tabs){
                
                
                if (tabs[j].trim().length <1) {continue;}
                if (d_sotr[tabs[j]] === undefined ) {continue;}
//                _$LOG(2,j+' |'+ tabs[j] + '| '+' %%%%%%%%%%% '+ tabs[j].trim().length  + ' '+tabs[j].length +'<br>');
//                _$LOG(2,JSON.stringify(d_sotr[tabs[j]])+'<br>');
                tab_cat = d_sotr[tabs[j]].category;
                tab_post = d_sotr[tabs[j]].post;
                tab_stavka = d_sotr[tabs[j]].stavka;
//                _$LOG(2,'%%%%%%%%%%% d_sotr '+ tabs[j] + JSON.stringify(d_sotr[tabs[j]]) + ' '+tab_cat+' '+tab_post+'<br>');
                for (n_month = 1;n_month<=12;n_month++){

                    var floatVal = parseFloat(data_1c[tabs[j]+'_'+n_month]);
                    if (!isNaN(floatVal)) {
                        //_$LOG(2,tabs[j]+'_'+n_month+' '+(data_1c[tabs[j]+'_'+n_month])+' '+'<br>');
                        div_sum += floatVal;
                        full_sum += floatVal;   
                        if (post_dist[tab_post]=== undefined){
                            post_dist[tab_post] = 0;
                            post_dist[tab_post+'_cnt'] = 0;

                        }
                        if (cat_dist[tab_cat]=== undefined){
                            cat_dist[tab_cat] = 0;
                            cat_dist[tab_cat+'_cnt'] = 0;
                        }
                        cat_dist[tab_cat] +=floatVal;
                        post_dist[tab_post] +=floatVal;
                        cat_dist[tab_cat+'_cnt'] +=tab_stavka;
                        post_dist[tab_post+'_cnt'] +=tab_stavka;

                        if (full_post_dist[tab_post]=== undefined){
                            full_post_dist[tab_post] = 0;
                            full_post_dist[tab_post+'_cnt'] = 0;
                        }
                        if (full_cat_dist[tab_cat]=== undefined){
                            full_cat_dist[tab_cat] = 0;
                            full_cat_dist[tab_cat+'_cnt'] = 0;
                        }
                        full_cat_dist[tab_cat] +=floatVal;
                        full_cat_dist[tab_cat+'_cnt'] +=tab_stavka;
                        full_post_dist[tab_post] +=floatVal;
                        full_post_dist[tab_post+'_cnt'] +=tab_stavka;
                        for (iii in d_category) {
    //                       _$LOG(2,'LOOKUP CATEGORY'+ iii+ ' - '+d_category[iii].pname+' - '+tab_cat+'<br>')
                            if (d_category[iii].pname==tab_cat) {
                                d_category[iii].m_pay +=(+floatVal);
    //                            _$LOG(2,'LOOKUP CATEGORY ok '+ JSON.stringify(d_category)+'<br>')    
                            }
                        }

                    };
                }


                var floatVal = parseFloat(stimul_1c[tabs[j]]);
                if (!isNaN(floatVal)) {
                    div_stimul += floatVal;
                    full_stimul += floatVal;   
                };
                var floatVal = parseFloat(fzp_1c[tabs[j]]);
                if (!isNaN(floatVal)) {
                    div_fzp += floatVal;
                    full_fzp += floatVal;   
                };
                var floatVal = parseFloat(bonus_1c[tabs[j]]);
                if (!isNaN(floatVal)) {
                    div_bonus += floatVal;
                    full_bonus += floatVal;   
                };
                var floatVal = parseFloat(quartbonus_1c[tabs[j]]);
                if (!isNaN(floatVal)) {
                    div_quartbonus += floatVal;
                    full_quartbonus += floatVal;   
                };
                var floatVal = parseFloat(prochee_1c[tabs[j]]);
                if (!isNaN(floatVal)) {
                    div_prochee += floatVal;
                    full_prochee += floatVal;   
                };

                var floatVal = parseFloat(otpusk_1c[tabs[j]]);
                if (!isNaN(floatVal)) {
                    div_otpusk += floatVal;
                    full_stimul += floatVal;   
                };




//                _$LOG(2,tabs[j]+ ' - '+div_sum+' - '+data_1c[tabs[j]]+'}<br>')
            };
//            var newel=topnames[i];
//            var addel={"paysum":div_sum};
            topnames[i].paysum = parseInt(div_sum/(1000 * month_cnt));
            topnames[i].stimul = parseInt(div_stimul/(1000 * month_cnt));
            topnames[i].bonus = parseInt(div_bonus/(1000 * month_cnt));
            topnames[i].fzp = parseInt(div_fzp/(1000 * month_cnt));
            topnames[i].prochee = parseInt(div_prochee/(1000 * month_cnt));
            topnames[i].otpusk = parseInt(div_otpusk/(1000 * month_cnt));
            topnames[i].quartbonus = parseInt(div_quartbonus/(1000 * month_cnt));


            topnames[i].p_paysum = parseInt(div_sum*100/div_sum);
            topnames[i].p_stimul = parseInt(div_stimul*100/div_sum);
            topnames[i].p_bonus = parseInt(div_bonus*100/div_sum);
            topnames[i].p_fzp = parseInt(div_fzp*100/div_sum);
            topnames[i].p_prochee = parseInt(div_prochee*100/div_sum);
            topnames[i].p_otpusk = parseInt(div_otpusk*100/div_sum);
            topnames[i].p_quartbonus = parseInt(div_quartbonus*100/div_sum);
            topnames[i].p_greyzone = 100 -  parseInt( div_quartbonus*100/div_sum +
            div_stimul*100/div_sum + 
            div_bonus*100/div_sum +
            div_fzp*100/div_sum + 
            div_prochee*100/div_sum +
            div_otpusk*100/div_sum  );




            topnames[i].m_paysum = parseInt(div_sum/(topnames[i].cnt * 1000 * month_cnt));
            topnames[i].m_stimul = parseInt(div_stimul/(topnames[i].cnt*1000 * month_cnt));
            topnames[i].m_bonus = parseInt(div_bonus/(topnames[i].cnt*1000 * month_cnt));
            topnames[i].m_fzp = parseInt(div_fzp/(topnames[i].cnt*1000 * month_cnt));
            topnames[i].m_prochee = parseInt(div_prochee/(topnames[i].cnt*1000 * month_cnt));
            topnames[i].m_otpusk = parseInt(div_otpusk/(topnames[i].cnt*1000 * month_cnt));
            topnames[i].m_quartbonus = parseInt(div_quartbonus/(topnames[i].cnt*1000 * month_cnt));
            topnames[i].m_greyzone =parseInt( (div_sum -  ( div_quartbonus + div_stimul + div_bonus + div_fzp + div_prochee + div_otpusk)) / (topnames[i].cnt*1000 * month_cnt));

//             _$LOG(2,'topnames[i] '+JSON.stringify(topnames[i])+'<br> ')
            for (i_otd in d_otdelenie_age_salary){ 
                    _$LOG(2,'LOOKUP otdelenie '+ d_otdelenie_age_salary[i_otd].pname+' === '+topnames[i].name+'<br>')                    ;
                     if (d_otdelenie_age_salary[i_otd].pname.indexOf(topnames[i].pname)==0) {
                        d_otdelenie_age_salary[i_otd].v1 = topnames[i].m_paysum;
                      //  _$LOG(2,'LOOKUP OK '+ JSON.stringify(d_otdelenie_age_salary[i_otd])+'<br>')                    ;
                }
            }

        }
        setPrm('d_full_lab_raw', JSON.stringify(d_full_lab));
        setPrm('tpn','');
        _$GET_DATA("[div_dist]");
        div_dist = prm('div_dist');
        div_dist = div_dist.substring(0,div_dist.length-1);
        div_dist = JSON.parse('{'+div_dist+'}');          



        for (ii in d_full_lab){
            div = d_full_lab[ii];
            for (ipost in div_dist){
                if (d_full_lab[ii].post_dist[ipost] === undefined){
                    continue;
                }
             //   _$LOG(2,d_full_lab[ii].pname+' ]]]]]]]]]]]]]]]]]]] ipost '+ipost+' '+div_dist[ipost] +'<br>');
                d_full_lab[ii].post_dist[ipost] = parseInt( 
                      d_full_lab[ii].post_dist[ipost] / d_full_lab[ii].post_dist[ipost+'_cnt']
               );
                
            }
            
        }
            restabl ='<table border=1 style="padding:3px;margin-bottom:10px" class=rtbl ><tr><td><h3>Таб. 2 Средние начисления по должностям в подраздедллениях и лаборатории в целом</h3></td></tr></table> '    + 
                    '<table border=1 style="padding:3px;margin-bottom:10px" class=rtbl>';
            row = '<tr><td>Должность</td>';
                for (ii in d_full_lab){
                   row += '<td>'+ d_full_lab[ii].pname+'</td>';
                }
            restabl += row +'</tr>';
            for (ipost in div_dist){
                row = '<tr><td>'+ipost+'</td>';
                for (ii in d_full_lab ){
                
                        if (d_full_lab[ii].post_dist[ipost] === undefined){
                            row +='<td></td>';
                        } else {
                            row +='<td>'+d_full_lab[ii].post_dist[ipost]+'</td>';
                        }
                }
                restabl += row +'</tr>';
            }
    //   _$LOG(2,'!%%%%%%%%%%@@@@@%%%%%%%%%%% D_FULL_LAB '+JSON.stringify(d_full_lab)+'<br>')
        setPrm('d_otdelenie', JSON.stringify(topnames));
        setPrm('d_otdelenie_age_salary', JSON.stringify(d_otdelenie_age_salary));
        setPrm('restabl',restabl);
        setPrm('d_full_lab', JSON.stringify(d_full_lab));

            
    
    for (ii in d_category){
      d_category[ii].m_pay =   parseInt(d_category[ii].m_pay/(d_category[ii].st_sum*month_cnt));
    }



        setPrm('d_category', JSON.stringify(d_category));
        setPrm('full_sum', parseInt(full_sum/1000));
        
    $JS}

[end]

[report footer]
    $SET_PARAMETERS NumTableCols=14;
    $SET_PARAMETERS d_otdelenie=[#d_otdelenie#]
    $SET_PARAMETERS d_full_lab=[#d_full_lab#]
    $LOG2 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ d_full_lab=#d_full_lab# <br>
$JS_BEGIN 
        var tmp = prm('d_category');
        tmp = tmp.substring(0,tmp.length-1);
        setPrm('d_category',tmp);
$JS_END 
    $SET_PARAMETERS d_category=[#d_category#]
    $SET_PARAMETERS d_post=[#d_post#]
    $SET_PARAMETERS d_otdel=[#d_otdel#]
    $SET_PARAMETERS d_age=[#d_age#]
    
    $SET_PARAMETERS d_otdelenie_age_salary=[#d_otdelenie_age_salary#]
    $SET_PARAMETERS d_otdelenie_category=[#d_otdelenie_category#]
    $SET_PARAMETERS d_otdel_category=[#d_otdel_category#]
    $SET_PARAMETERS d_otdel_age_salary=[#d_otdel_age_salary#]
    $JS{ 
        var d_sotr = prm('d_sotr').trim();
        d_sotr = d_sotr.slice(0,-1);
        d_sotr = '{'+d_sotr+'}';
        var d_sotr = JSON.parse(d_sotr);
        var d_topdivs = prm('d_topdivs').trim().slice(0,-1);
        var d_topdivs = JSON.parse('{'+d_topdivs+'}');
        _$LOG(2,d_sotr+ 'sotr count '+ Object.keys(d_sotr).length +'<br>@@@@@@@@@@@@@@!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!<br>');
        _$LOG(2,d_topdivs+ 'sotr count '+ Object.keys(d_topdivs).length +'<br>@@@@@@@@@@@@!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!<br>');
    $JS}

    $JS{
        _$LOG(2,d_sotr+ 'sotr count '+ Object.keys(d_sotr).length +'<br>%%%%!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!<br>');
        _$LOG(2,d_topdivs+ 'sotr count '+ Object.keys(d_topdivs).length +'<br>%%%%!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!<br>');
    $JS} 
$INCLUDE [1c process] ??

    

    #restabl# ??
<br>===========d_full_lab_raw================<br> ??
#d_full_lab_raw# ??
<br>===========d_full_labw================<br> ??
#d_full_lab# ??
<br> ??
$LOG2 !!!!!!!!!!!!!!!!!!!!    var a = "#d_otdel#"; !!!!!!!!!!!!!! <br>
    <script type="text/javascript">
        console.log("before create chart 1 ssssssss");
        var a = #d_otdel#;
        console.log("");
        
    </script>

$LOG2 !!!!!!!!!!!!!!!!!!!!    Otdelenie '#otdelenie#' !!!!!!!!!!!!!! <br>
$LOG2             "dataProvider" otdelenie:   #d_otdelenie# <br>  
$LOG2            "dataProvider": otdel #d_otdel# <br>  
<h3>Chart 0.</h3> ??
    <div  class="graphContaner" id="age_hist_ppls_chart"  style="width:800px;height:500px;margin-top:10px;color:black;border: solid 3px black">
    </div>
<h3>Chart 1. Распределение ставок по возрастам и категориям</h3> 
    <div  class="graphContaner" id="age_cat_stack_chart"  style="width:800px;height:500px;margin-top:10px;color:black;border: solid 3px black">
    </div>

<h3>Chart 2.</h3> ??

<div  class="graphContaner" id="age_hist_salary_chart"  style="width:800px;height:500px;margin-top:10px;color:black;border: solid 3px black"></div> ??
<div class=graphContaner id="age_chart"  style="margin-top:10px;color:black;border: solid 3px black"></div> ??
<h3>Chart 2. Категории</h3> 
    <div class=graphContaner id="category_chart"  style="margin-top:10px;color:black;border: solid 3px black">
    </div>
<h3>Chart 3-1.Должности</h3>??
    <div class=graphContaner id="post_chart"  style="margin-top:10px;color:black;border: solid 3px black;height:1500px;">??
    </div>??



<h3>Chart 3.</h3> ??
    <div class="graphContaner" style="width:800px;height:9000px" id="divisions_age_pay_cnt_chart"  style="margin-top:10px;color:black;border: solid 3px black">
    </div>

<h3>Chart 4. Подразделения. Распределение по категориям</h3> 
    <div class="graphContaner" style="width:800px;height:9000px" id="divisions_chart"  style="margin-top:10px;color:black;border: solid 3px black">
    </div>

<h3>Chart 8.</h3> ??LAB_ID=100000____

               <div style="width:800px;" id="otdelenie_chart" class="graphContaner"> </div>  ??LAB_ID=100000___ 
<h3>Chart 9. </h3> ??LAB_ID=100000__

               <div style="width:800px;" id="otdelenie_chart_serial" class="graphContaner"> </div> ??LAB_ID=100000__
<h3>Chart 10. </h3> ??LAB_ID=100000__

               <div style="width:800px" id="otdelenie_ppls_chart"    class="graphContaner"> </div>??LAB_ID=100000__
<h3>Chart 11. </h3> ??LAB_ID=100000__

               <div style="width:800px" id="otdelenie_ppls_chart_serial"    class="graphContaner"> </div>??LAB_ID=100000__


<script>
    var cat_color= {

        "Руководители": "##FF0000",
        "Рабочие": "##44a308",
        "Научные и научно-педагогические работники": "##0000FF",
        "Специалисты":"##13450E"
    } ;

</script>


        



<script>
var d_age_new = [#d_age_new#];
var age_new = [];
var pred_name='', newel='';
var cur_sum = 0;

var pred_name='', newel='';
var cur_sum = 0;
for (i in d_age_new){
    if( (pred_name != d_age_new[i].pname)){
        if (newel!=''){

            for (i1 in newel) {
                if (i1.indexOf('pname')<0){
                    newel['p_'+i1] = ((newel[i1] * 100)/cur_sum).toFixed(2); 
                }
            }
            newel.total = cur_sum;
//            console.log(d_age_new[i].pname + '!!!Stack 2 '+i1+' '+d_age_new[i][i1]+' '+cur_sum);
            age_new.push(newel);
        };
        cur_sum = 0;
        newel = {};
    }
    for (i1 in d_age_new[i]) {
        if (i1.indexOf('pname')<0){
            cur_sum += (+d_age_new[i][i1]);
//            console.log(d_age_new[i].pname + '!!!Stack 2 '+i1+' '+d_age_new[i][i1]+' '+cur_sum);
        }
    }
    pred_name = d_age_new[i].pname;
    Object.assign(newel,d_age_new[i]);

}

for (i1 in newel) {
    if (i1.indexOf('pname')<0){
        newel['p_'+i1] = ((newel[i1] * 100)/cur_sum).toFixed(2); 
    }
}
newel.total = cur_sum;

age_new.push(newel);
console.log('Last EL '+JSON.stringify(newel));
console.log(' age_new '+JSON.stringify(age_new));
</script>

$INCLUDE [chart 0]
$INCLUDE [chart 1]
$INCLUDE [chart 2 new categogy age] ??

$INCLUDE [charts 1-9]

$INCLUDE [new stack chart]

[end]
[div_dist]
  SELECT CONCAT('"',post,'":[', count(post),',', SUM(stavka),'],') AS div_dist FROM sotrudniki s 
    WHERE lab_id=100000 
       AND s.TopParent_Name ='#tpn#' ??tpn
   GROUP BY post 
[end]

[1неучтенные виды расчетов]
    <H3>Таб. 1 Неучтеные виды расчета (ФИЛЬТРЫ НЕ РАБОТАЮТ !!!!)</H3>
    <table border=1 style="padding:3px;margin-bottom:10px" class=rtbl>
    <tr>
    <th>
    Вид рачета
    </th>
    <th>
    Сумима за период<b>т.р.
    </th>
    </tr>
    #pay_missed#
</table>

[end]


[charts 1-9]






    <script type="text/javascript">
        console.log("create chart 1 sssssss");
        
        var chart1_0 = AmCharts.makeChart("otdelenie_chart", {
            "titles": [{
			"id": "1",
                        text: "Распределение по ФОТ \n #full_sum#т.р."
        	}],
            "type": "pie",
            "theme": "light",
            "angle": 17.1,
            "dataProvider": #d_otdelenie#, ??!otdelenie
            "dataProvider": #d_otdel#, ??otdelenie
            "thousandsSeparator": " ",
            "valueField": "paysum",
            "titleField": "pname",
            "depth3D": 1,
            "innerRadius": 3,
            "radius": 164,
            "labelRadius": 4,
            "percentPrecision": 1,
            "precision": 0,
            "fontSize": 12,
            "labelText": "[[title]] \n [[percents]]%  ([[value]]т.р.)",
            "balloon": {
                "fixedPosition": true
            },
            "export": {
                "enabled": true
            }
        });
    </script>
    <script type="text/javascript">
        console.log("create chart 2 sssssss");

        var chart1_1 = AmCharts.makeChart("otdelenie_chart_serial", {
            "titles": [{
			"id": "1",
                        text: "Распределение по ФОТ #full_sum#т.р."
        	}],

            "rotate": true,
            "type": "serial",
                "theme": "light",
            "legend": {
                "horizontalGap": 10,
                "maxColumns": 1,
                "position": "bottom",
                        "useGraphSettings": true,
                        "markerSize": 10
            },
            "dataProvider": #d_otdelenie#, 
            "graphs": [
             {
                "balloonText": "<span style='font-size:14px'>[[category]]: <b>[[value]]</b></span>",
                "fillAlphas": 0.8,
                "labelText": "[[value]]т.р.",
                "lineAlpha": 0.3,
                "title": "ФОТ",
                "type": "column",
                        "color": "#000000",
                "valueField": "paysum"
            } 

            ],
            "categoryField": "pname",
            "categoryAxis": {
                "gridPosition": "start",
                "axisAlpha": 0,
                "gridAlpha": 0,
                "position": "left"
            },
            "export": {
                "enabled": true
             }

        });

    </script>
    <script type="text/javascript">
        console.log("create chart 3 sssssss");

        
        var chart2_0 = AmCharts.makeChart("otdelenie_ppls_chart", {
    "titles": [

		{
			"id": "1",
                        text: "Распределение по количеству сотрудников"
		}
	],

            "type": "pie",
            "theme": "light",
            "angle": 17.1,
            "dataProvider": #d_otdelenie_age_salary#, ??!otdelenie
            "dataProvider": #d_otdel_age_salary#, ??otdelenie
            "thousandsSeparator": " ",
            "valueField": "v3",
            "titleField": "pname",
            "depth3D": 1,
            "innerRadius": 3,
            "radius": 164,
            "labelRadius": 4,
            "percentPrecision": 1,
            "precision": 0,
            "fontSize": 12,
            "labelText": "[[title]] \n [[percents]]%  ([[value]])",
            "balloon": {
                "fixedPosition": true
            },
            "export": {
                "enabled": true
            }
        });
    </script>
    <script type="text/javascript">
        console.log("create chart 4 sssssss");

        var chart2_1 = AmCharts.makeChart("otdelenie_ppls_chart_serial", {
            "titles": [{
			"id": "1",
                            text: "Распределение по количеству сотрудников"        	}],

            "rotate": true,
            "type": "serial",
                "theme": "light",
            "legend": {
                "horizontalGap": 10,
                "maxColumns": 1,
                "position": "bottom",
                        "useGraphSettings": true,
                        "markerSize": 10
            },
            "dataProvider": #d_otdelenie_age_salary#, ??!otdelenie
            "dataProvider": #d_otdel_age_salary#, ??otdelenie
            "graphs": [
             {
                "balloonText": "<span style='font-size:14px'>[[category]]: <b>[[value]]</b></span>",
                "fillAlphas": 0.8,
                "labelText": "[[value]]чел.",
                "lineAlpha": 0.3,
                "title": "Сотрудники",
                "type": "column",
                        "color": "#000000",
                "valueField": "v3"
            } ],
            "categoryField": "pname",
            "categoryAxis": {
                "gridPosition": "start",
                "axisAlpha": 0,
                "gridAlpha": 0,
                "position": "left"
            },
            "export": {
                "enabled": true
             }

        });

    </script>






    <script type="text/javascript">


        console.log("create chart 7 sssssss");

var chart4_0 = AmCharts.makeChart("age_chart", {
    "rotate": true,
    "type": "serial",
	"theme": "light",
    "legend": {
        "horizontalGap": 10,
        "maxColumns": 1,
        "position": "bottom",
		"useGraphSettings": true,
		"markerSize": 10
    },
    "dataProvider": #d_otdelenie_age_salary#, ??!otdelenie
    "dataProvider": #d_otdel_age_salary#, ??otdelenie

    "valueAxes": [
		{
			"id": "1",
			"title": ""
		}
        ],

    "graphs": [
     {
            minimum : 0,

        "balloonText": "<b>[[title]]</b><br><span style='font-size:14px'>[[category]]: <b>[[value]]</b></span>",
        "fillAlphas": 0.8,
        "labelText": "[[value]]",
        "lineAlpha": 0.3,
        "title": "Средниее начисление",
        "type": "column",
		"color": "#000000",
        "valueField": "v1"
    }, {
            minimum : 0,

        "balloonText": "<b>[[title]]</b><br><span style='font-size:14px'>[[category]]: <b>[[value]]</b></span>",
        "fillAlphas": 0.8,
        "labelText": "[[value]]",
        "lineAlpha": 0.3,
        "title": "Средний возраст",
        "type": "column",
		"color": "#000000",
        "valueField": "v2"
    }, ],
    "categoryField": "pname",
    "categoryAxis": {
        "gridPosition": "start",
        "axisAlpha": 0,
        "gridAlpha": 0,
        "position": "left"
    },
    "export": {
    	"enabled": true
     }

});
    </script>

<script type="text/javascript">
        console.log("create chart 3 sssssss category_chart");
console.log("#d_category#");

var chart5_0 = AmCharts.makeChart("category_chart", {
    "rotate": true,
    "titles": [{
                "id": "1",
                    text: "Распределение по категориям"   	}],
    "type": "serial",
	"theme": "light",
    "legend": {
        "horizontalGap": 10,
        "maxColumns": 1,
        "position": "bottom",
		"useGraphSettings": true,
		"markerSize": 10
    },
    "dataProvider": #d_category#,
    "valueAxes": [
        {
            minimum : 0,

            "id":"m_pay",
            "axisColor": "#FF6600",
            "axisThickness": 2,
            "axisAlpha": 1,
            "titleFontSize": 10,
            "position": "left"
        }, {
            minimum : 0,

            "titleFontSize": 10,
            "id":"m_age",
            "axisColor": "#1111cc",
            "axisThickness": 2,
            "axisAlpha": 1,
            "position": "right"
        }, {
            minimum : 0,

            "id":"cnt",
            "axisColor": "#B0DE09",
            "axisThickness": 2,
            "gridAlpha": 0,
            "offset": 50,
            "axisAlpha": 1,
            "position": "left"
        }],
    "graphs": [
     {
        "valueAxis": "m_age",
        "balloonText": "<b>[[title]]</b><br><span style='font-size:14px'>[[category]]: <b>[[value]]</b></span>",
        "fillAlphas": 0.8,
        "labelText": "[[value]]y.o.",
        "lineAlpha": 0.3,
        "title": "Средний возраст",
        "type": "column",
	"lineColor": "#0000FF",
	"color": "#7777FF",
        "valueField": "m_age"
    }, 
    {
        "valueAxis": "cnt",
        "balloonText": "<b>[[title]]</b><br><span style='font-size:14px'>[[category]]: <b>[[value]]</b></span>",
        "fillAlphas": 0.8,
        "labelText": "[[value]]",
        "lineAlpha": 0.3,
        "title": "Ставок",
        "type": "column",
	"lineColor": "#B0DE09",
	"color": "#B0DE09",
        "valueField": "cnt"
    } 
],
    "categoryField": "pname",
    "categoryAxis": {
        "gridPosition": "start",
        "axisAlpha": 0,
        "gridAlpha": 0,
        "position": "left"
    },
    "export": {
    	"enabled": true
     }

});
console.log('chart3 end')
    </script>

<script type="text/javascript">
        console.log("create chart 8 - post sssssss");
var chart8_1 = AmCharts.makeChart("post_chart", {
    "rotate": true,
    "titles": [{
                "id": "1",
                    text: "Распределение по Должностям"   	}],
    "type": "serial",
	"theme": "light",
    "legend": {
        "horizontalGap": 10,
        "maxColumns": 1,
        "position": "bottom",
		"useGraphSettings": true,
		"markerSize": 10
    },
    "dataProvider": #d_post#,
    "valueAxes": [{
            minimum : 0,
            "titleFontSize": 10,
            "id":"m_age",
            "axisColor": "#1111cc",
            "axisThickness": 2,
            "axisAlpha": 1,
            "position": "right"
        }, {
            minimum : 0,

            "id":"cnt",
            "axisColor": "#B0DE09",
            "axisThickness": 2,
            "gridAlpha": 0,
            "offset": 50,
            "axisAlpha": 1,
            "position": "left"
        }],
    "graphs": [
 {
        "valueAxis": "m_age",
        "balloonText": "<b>[[title]]</b><br><span style='font-size:14px'>[[category]]: <b>[[value]]</b></span>",
        "fillAlphas": 0.8,
        "labelText": "[[value]]y.o.",
        "lineAlpha": 0.3,
        "title": "Средний возраст",
        "type": "column",
	"lineColor": "#0000FF",
	"color": "#7777FF",
        "valueField": "m_age"
    }, 
{
        "valueAxis": "cnt",
        "balloonText": "<b>[[title]]</b><br><span style='font-size:14px'>[[category]]: <b>[[value]]</b></span>",
        "fillAlphas": 0.8,
        "labelText": "[[value]]",
        "lineAlpha": 0.3,
        "title": "Ставок",
        "type": "column",
	"lineColor": "#B0DE09",
	"color": "#B0DE09",
        "valueField": "cnt"
    }, 
],
    "categoryField": "pname",
    "categoryAxis": {
        "gridPosition": "start",
        "axisAlpha": 0,
        "gridAlpha": 0,
        "position": "left"
    },
    "export": {
    	"enabled": true
     }

});
    </script>

    <script type="text/javascript">

        console.log("create chart 9 sssssss");

var chart6_0 = AmCharts.makeChart("divisions_age_pay_cnt_chart", {
    "rotate": true,
    "type": "serial",
	"theme": "light",
            "titles": [{
			"id": "1",
                            text: "Подраздедения.  Количество, средний возраст"   	}],
    "legend": {
        "horizontalGap": 10,
        "maxColumns": 1,
        "position": "bottom",
		"useGraphSettings": true,
		"markerSize": 10
    },
    "dataProvider": #d_otdelenie_age_salary#, ??!otdelenie
    "dataProvider": #d_otdel_age_salary#, ??otdelenie
    "valueAxes": [{
            minimum : 0,
            "id":"v1",
            "axisColor": "#FF6600",
            "axisThickness": 2,
            "axisAlpha": 1,
            "titleFontSize": 10,
            "position": "left"
        }, {
            minimum : 0,
            "titleFontSize": 10,
            "id":"v2",
            "axisColor": "#1111cc",
            "axisThickness": 2,
            "axisAlpha": 1,
            "position": "right"
        }, {
            minimum : 0,
            "id":"v3",
            "axisColor": "#B0DE09",
            "axisThickness": 2,
            "gridAlpha": 0,
            "offset": 50,
            "axisAlpha": 1,
            "position": "left"
        }],
    "graphs": [
 {
        "valueAxis": "v2",
        "balloonText": "<b>[[title]]</b><br><span style='font-size:14px'>[[category]]: <b>[[value]]</b></span>",
        "fillAlphas": 0.8,
        "labelText": "[[value]]y.o.",
        "lineAlpha": 0.3,
        "title": "Средний возраст",
        "type": "column",
	"lineColor": "#0000FF",
	"color": "#7777FF",
        "valueField": "v2"
    }, 
{
        "valueAxis": "v3",
        "balloonText": "<b>[[title]]</b><br><span style='font-size:14px'>[[category]]: <b>[[value]]</b></span>",
        "fillAlphas": 0.8,
        "labelText": "[[value]]",
        "lineAlpha": 0.3,
        "title": "Сотрудников",
        "type": "column",
	"lineColor": "#B0DE09",
	"color": "#B0DE09",
        "valueField": "v3"
    }, 
],
    "categoryField": "pname",
    "categoryAxis": {
        "gridPosition": "start",
        "axisAlpha": 0,
        "gridAlpha": 0,
        "position": "left"
    },
    "export": {
    	"enabled": true
     }

});




    </script>
$INCLUDE [new categogy age]

[end]

[chart 2 new categogy age]
<script type="text/javascript">

var chart5_0 = AmCharts.makeChart("age_hist_salary_chart", {
    "rotate": false,
    "titles": [{
                "id": "1",
                    text: "Распределение ставок по возрастам и категориям"   	}],
    "type": "serial",
	"theme": "light",
    "legend": {
        "horizontalGap": 1,
        "maxColumns": 1,
        "position": "bottom",
		"useGraphSettings": true,
		"markerSize": 10
    },
    "dataProvider": age_new,
    "valueAxes": [{
            minimum : 0,

            "id":"cnt",
            "axisColor": "##000000",
            "axisThickness": 4,
            "axisAlpha": 1,
            "titleFontSize": 10,
            "position": "left"
        }],
    "graphs": [

     {
        "valueAxis": "cnt",
        "balloonText": "<b>[[title]]</b><br><span style='font-size:14px'>[[category]]: <b>[[value]]</b></span>",
        "fillAlphas": 1,
        "labelText": "[[value]]",
        "lineAlpha": 0.3,
        "title": "Руководители",
        "type": "column",
	"lineColor": "##FF0000",
	"color": "##FF0000",
        "valueField": "Рабочие"
    }, 
     {
        "valueAxis": "cnt",
        "balloonText": "<b>[[title]]</b><br><span style='font-size:14px'>[[category]]: <b>[[value]]</b></span>",
        "fillAlphas": 1,
        "labelText": "[[value]]",
        "lineAlpha": 0.3,
        "title": "Рабочие",
        "type": "column",
	"lineColor": "##44a308",
	"color": "##44a308",
        "valueField": "Рабочие"
    }, {
        "valueAxis": "cnt",
        "balloonText": "<b>[[title]]</b><br><span style='font-size:14px'>[[category]]: <b>[[value]]</b></span>",
        "fillAlphas": 1.8,
        "labelText": "[[value]]",
        "lineAlpha": 1,
        "title": "Научные и научно-педагогические работники",
        "type": "column",
	"lineColor": "##0000FF",
	"color": "##0000FF",
        "valueField": "Научные и научно-педагогические работники"
    }, 
{
        "valueAxis": "cnt",
        "balloonText": "<b>[[title]]</b><br><span style='font-size:14px'>[[category]]: <b>[[value]]</b></span>",
        "fillAlphas": 1,
        "labelText": "[[value]]",
        "lineAlpha": 1,
        "title": "Специалисты",
        "type": "column",
	"lineColor": "##13450E",
	"color": "##13450E",
        "valueField": "Специалисты"
    }, 
],
    "categoryField": "pname",
    "categoryAxis": {
        "gridPosition": "start",
        "axisAlpha": 0,
        "gridAlpha": 0,
        "position": "left"
    },
    "export": {
    	"enabled": true
     }

});
    </script>
[end]




[chart 0]
$LOG2  d_age #d_age# <br>
    <script type="text/javascript">


        console.log("create chart 0 sssssss");

 
    var chart3_0 = AmCharts.makeChart("age_hist_ppls_chart", {
        width:1400,
            "titles": [{
			"id": "1",
                            text: "Распределение количсетва сотрудников по возрастам. Кол-во ставок.\nСредний возраст=#mean_age#"   	}], 
    "rotate": false,
    "type": "serial",
	"theme": "light",
    "legend": {
        "horizontalGap": 1,
        "maxColumns": 1,
        "position": "bottom",
		"useGraphSettings": true,
		"markerSize": 5
    },
    "dataProvider": #d_age#,
    "graphs": [
{
        "balloonText": "<b>[[title]]</b><br><span style='font-size:14px'>[[category]]: <b>[[value]]</b></span>",
        "fillAlphas": 0.8,
        "labelText": "[[value]]",
        "lineAlpha": 0.3,
        "title": "Ставок",
        "type": "column",
	"lineColor": "#0000FF",
	"color": "#7777FF",
        "valueField": "cnt"
    }, 
],
    "categoryField": "pname",
    "export": {
    	"enabled": true
     }
});
    </script>
[end]


[chart 1]

$SET_PARAMETERS X=Y
$SET_PARAMETERS Y=X
$SET_PARAMETERS x=y
$SET_PARAMETERS y=x
    <script>
            console.log("create age_cat_stack_chart @@@@@@@@@@@@@@@@@@ sssssss");

    var chart = am4core.create("age_cat_stack_chart", am4charts.XYChart);

    
    console.log('age_new '+JSON.stringify(age_new));
    chart.data = age_new;
    chart.exporting.menu = new am4core.ExportMenu();
    var categoryAxis = chart.#y#Axes.push(new am4charts.CategoryAxis());
    console.log('!!!Stack 3');




    categoryAxis.dataFields.category = "pname";
    categoryAxis.renderer.grid.template.location = 0;
    console.log('!!!Stack 4');


      categoryAxis.minGridDistance = 0;
      categoryAxis.renderer.cellStartLocation = 0.1;
      categoryAxis.renderer.cellEndLocation = 0.5;
      categoryAxis.minVerticalGap = 0;




    var valueAxis = chart.#x#Axes.push(new am4charts.ValueAxis());
    valueAxis.renderer.labels.template.disabled = false;
    valueAxis.min = 0;
    valueAxis.numberFormatter = new am4core.NumberFormatter();
    valueAxis.numberFormatter.numberFormat = "#.#";
    valueAxis.title.text = "Сотрудников";
    valueAxis.extraMax =  0.1;
    valueAxis.calculateTotals = true;
    console.log('!!!Stack 5');


    // Create series
    function createSeries(field, name, s_color) {
        s_color = cat_color[name];
            // Set up series
        var series = chart.series.push(new am4charts.ColumnSeries());
        if(typeof s_color === "undefined")
            {} else
             {
                s_color = cat_color[name];
                series.fill =  s_color;
             };
        series.name = name;
        console.log('Create SERIES '+series.name +' '+series.tabindex);
        
        series.dataFields.value#X# = field;
        series.dataFields.category#Y# = "pname";
        series.sequencedInterpolation = true;
        series.calculatePercent = true;
        //series.cursorTooltipEnabled = false;

        // Make it stacked
        series.stacked = true;

        // Configure columns
        series.columns.template.width = am4core.percent(70);
        //series.columns.template.tooltipText = "{name} [font-size:10px] {valueY.totalPercent.formatNumber('#.0')}% [/][font-size:10px]({value#Y#}т.р.)";

        // Configure legend
//        series.legendSettings.itemValueText = " {value#X#.totalPercent.formatNumber('#.0')}";
          series.legendSettings.itemValueText = " {value#X#.formatNumber('#.0')}";

        // Add label
        var labelBullet = series.bullets.push(new am4charts.LabelBullet());
//        labelBullet.label.text = "[font-size:8px]{value#X#.totalPercent.formatNumber('#.0')}";
        labelBullet.label.text = "[font-size:8px]{value#X#.formatNumber('#.0')}";
        labelBullet.location#X# = 0.5;
        labelBullet.label.fill = am4core.color("#fff");

        return series;
    }
    chart.cursor = new am4charts.XYCursor();
    chart.cursor.behavior = "none";
    createSeries("Рабочие", "Рабочие");
    createSeries("Научные и научно-педагогические работники", "Научные и научно-педагогические работники");
    createSeries("Специалисты", "Специалисты");
    createSeries("Руководители", "Руководители");


    var totalSeries = chart.series.push(new am4charts.ColumnSeries());
    totalSeries.dataFields.value#X# = "none";
    totalSeries.dataFields.category#Y# = "category";
    totalSeries.stacked = true;
    totalSeries.hiddenInLegend = true;
    totalSeries.columns.template.strokeOpacity = 90;

    var totalBullet = totalSeries.bullets.push(new am4charts.LabelBullet());
    totalBullet.dy = -20;
    totalBullet.label.text = "{value#Y#.total}";
    totalBullet.label.hideOversized = false;
    totalBullet.label.fontSize = 12;
    totalBullet.label.background.fill = totalSeries.stroke;
    totalBullet.label.background.fillOpacity = 0.0;
    totalBullet.label.padding(-5, -10, -5, -10);

    chart.legend = new am4charts.Legend();
    categoryAxis.renderer.labels.values.forEach((v) => (v.visible = true));
    </script>
[end]












[new stack chart]



<script>
        console.log("create chart 10 sssssss");

var d_otdelenie_category = #d_otdelenie_category#;
var otd_cat = [];
var pred_name='', newel='';
var cur_sum = 0;
for (i in d_otdelenie_category){
    if( (pred_name != d_otdelenie_category[i].pname)){
        if (newel!=''){

            for (i1 in newel) {
                if (i1.indexOf('pname')<0){
                    newel[i1] = ((newel[i1] * 100)/cur_sum).toFixed(2); 
                }
            }
            newel.total = cur_sum;
            console.log(d_otdelenie_category[i].pname + '!!!Stack 2 '+i1+' '+d_otdelenie_category[i][i1]+' '+cur_sum);
            otd_cat.push(newel);
        };
        cur_sum = 0;
        newel = {};
    }
    for (i1 in d_otdelenie_category[i]) {
        if (i1.indexOf('pname')<0){
            cur_sum += (+d_otdelenie_category[i][i1]);
            console.log(d_otdelenie_category[i].pname + '!!!Stack 2 '+i1+' '+d_otdelenie_category[i][i1]+' '+cur_sum);
        }
    }
    pred_name = d_otdelenie_category[i].pname;
    Object.assign(newel,d_otdelenie_category[i]);
    
}

for (i1 in newel) {
    if (i1.indexOf('pname')<0){
        newel[i1] = ((newel[i1] * 100)/cur_sum).toFixed(2); 
    }
}
newel.total = cur_sum;

otd_cat.push(newel);
console.log('!!!Stack 1'+JSON.stringify(newel));
var chart = am4core.create("divisions_chart", am4charts.XYChart);
//var label = chart.plotContainer.createChild(am4core.Label);
//label.x = am4core.percent(97);
//label.y = am4core.percent(95);
//label.horizontalCenter = "right";
//label.verticalCenter = "middle";
//label.dx = -15;
//label.fontSize = 25;

//chart.rotate =  true;
console.log('!!!Stack 2');
//var title = chart.createChild(am4core.Label);
//console.log('!!!Stack 3');
//title.fill = am4core.color("##b9ce37");
//title.fontSize = 14;
//title.isMeasured = false;
//title.valign = "top";
//title.align = "center";
//title.wrap = false;
//title.width = 600;
//title.text = "[bold] Подраздедения []Распределение по категориям";
console.log('!!!Stack 4');

chart.data = otd_cat;
console.log('===========otd_cat '+  JSON.stringify(otd_cat));
chart.exporting.menu = new am4core.ExportMenu();

console.log('!!!Stack 2');

var categoryAxis = chart.yAxes.push(new am4charts.CategoryAxis());
//categoryAxis.renderer.labels.template.rotation = 270;
console.log('!!!Stack 3');

categoryAxis.dataFields.category = "pname";
categoryAxis.renderer.grid.template.location = 0;
console.log('!!!Stack 4');

var valueAxis = chart.xAxes.push(new am4charts.ValueAxis());
//valueAxis.renderer.inside = true;
valueAxis.renderer.labels.template.disabled = true;
valueAxis.min = 0;
valueAxis.numberFormatter = new am4core.NumberFormatter();
valueAxis.numberFormatter.numberFormat = "#.#";
valueAxis.title.text = "Сотрудников";
valueAxis.extraMax =  0.1;
valueAxis.calculateTotals = true;
console.log('!!!Stack 5');


// Create series
function createSeries(field, name) {

    // Set up series
    var series = chart.series.push(new am4charts.ColumnSeries());
    let s_color = cat_color[name];
    series.fill =  s_color;

    series.name = name;
    console.log('Create SERIES '+series.name +' '+series.tabindex);

    series.dataFields.valueX = field;
    series.dataFields.categoryY = "pname";
    series.sequencedInterpolation = true;
    series.calculatePercent = true;
    //series.cursorTooltipEnabled = false;

    // Make it stacked
    series.stacked = true;

    // Configure columns
  // [font-size:14px]
    series.columns.template.width = am4core.percent(70);
    //series.columns.template.tooltipText = "{name} [font-size:10px] {valueY.totalPercent.formatNumber('#.0')}% [/][font-size:10px]({valueY}т.р.)";

    // Configure legend
    series.legendSettings.itemValueText = " {valueX.totalPercent.formatNumber('#.0')}%";

    // Add label
    var labelBullet = series.bullets.push(new am4charts.LabelBullet());
    labelBullet.label.text = "[font-size:8px]{valueX.totalPercent.formatNumber('#.0')}%";
    labelBullet.locationX = 0.5;
    labelBullet.label.fill = am4core.color("#fff");

    return series;
}
//"#fzp#", "#bonusfzp#" "#quartbonus#" "#stip#" "#prochee#", "#stimul#" "#otpusk#", "category":"#:monthKvartal(prm('qMONTH'))#", "none": 0 },
chart.cursor = new am4charts.XYCursor();
chart.cursor.behavior = "none";
createSeries("Рабочие", "Рабочие");
createSeries("Руководители", "Руководители");
createSeries("Специалисты", "Специалисты");
createSeries("Научные и научно-педагогические работники", "Научные и научно-педагогические работники");
//createSeries("test", "test");
// Create series for total
var totalSeries = chart.series.push(new am4charts.ColumnSeries());
totalSeries.dataFields.valueX = "none";
totalSeries.dataFields.categoryY = "category";
totalSeries.stacked = true;
totalSeries.hiddenInLegend = true;
totalSeries.columns.template.strokeOpacity = 90;

var totalBullet = totalSeries.bullets.push(new am4charts.LabelBullet());
totalBullet.dy = -20;
totalBullet.label.text = "{valueY.total}";
totalBullet.label.hideOversized = false;
totalBullet.label.fontSize = 12;
totalBullet.label.background.fill = totalSeries.stroke;
totalBullet.label.background.fillOpacity = 0.0;
totalBullet.label.padding(-5, -10, -5, -10);

// Legend
chart.legend = new am4charts.Legend();
</script>

[end]


[divisions_fin_chart]


    <script>
            console.log("create divisions_fin_chart 11 sssssss");

    var d_otdelenie = #d_otdelenie#;
    var otd_cat = d_otdelenie;
    var chart = am4core.create("divisions_fin_chart", am4charts.XYChart);

    chart.data = otd_cat;
    console.log('===========otd_cat '+  JSON.stringify(otd_cat));
    chart.exporting.menu = new am4core.ExportMenu();

    console.log('!!!Stack 2');

    var categoryAxis = chart.yAxes.push(new am4charts.CategoryAxis());
    console.log('!!!Stack 3');

    categoryAxis.dataFields.category = "pname";
    categoryAxis.renderer.grid.template.location = 0;
    console.log('!!!Stack 4');

    var valueAxis = chart.xAxes.push(new am4charts.ValueAxis());
    valueAxis.renderer.labels.template.disabled = true;
    valueAxis.min = 0;
    valueAxis.numberFormatter = new am4core.NumberFormatter();
    valueAxis.numberFormatter.numberFormat = "#.#";
    valueAxis.title.text = "Сотрудников";
    valueAxis.extraMax =  0.1;
    valueAxis.calculateTotals = true;
    console.log('!!!Stack 5');


    // Create series
    function createSeries(field, name, s_color) {

        // Set up series
    color = cat_color[name];

        var series = chart.series.push(new am4charts.ColumnSeries());
        if(typeof s_color === "undefined")
            {} else
             {
                series.fill =  s_color;
             };
        series.name = name;
        console.log('Create SERIES '+series.name +' '+series.tabindex);
        
        series.dataFields.valueX = field;
        series.dataFields.categoryY = "pname";
        series.sequencedInterpolation = true;
        series.calculatePercent = true;
        //series.cursorTooltipEnabled = false;

        // Make it stacked
        series.stacked = true;

        // Configure columns
        series.columns.template.width = am4core.percent(70);
        //series.columns.template.tooltipText = "{name} [font-size:10px] {valueY.totalPercent.formatNumber('#.0')}% [/][font-size:10px]({valueY}т.р.)";

        // Configure legend
        series.legendSettings.itemValueText = " {valueX.totalPercent.formatNumber('#.0')}%";

        // Add label
        var labelBullet = series.bullets.push(new am4charts.LabelBullet());
        labelBullet.label.text = "[font-size:8px]{valueX.totalPercent.formatNumber('#.0')}%";
        labelBullet.locationX = 0.5;
        labelBullet.label.fill = am4core.color("#fff");

        return series;
    }
    chart.cursor = new am4charts.XYCursor();
    chart.cursor.behavior = "none";
    createSeries("p_fzp", "ФЗП");
    createSeries("p_stimul", "Стимул");
    createSeries("p_bonus", "Премия");
    createSeries("p_quartbonus", "кв.Премия");
    createSeries("p_otpusk", "Отпуск");
    createSeries("p_prochee", "Прочее");
    createSeries("p_greyzone", "Серая зона",'red');

    var totalSeries = chart.series.push(new am4charts.ColumnSeries());
    totalSeries.dataFields.valueX = "none";
    totalSeries.dataFields.categoryY = "category";
    totalSeries.stacked = true;
    totalSeries.hiddenInLegend = true;
    totalSeries.columns.template.strokeOpacity = 90;

    var totalBullet = totalSeries.bullets.push(new am4charts.LabelBullet());
    totalBullet.dy = -20;
    totalBullet.label.text = "{valueY.total}";
    totalBullet.label.hideOversized = false;
    totalBullet.label.fontSize = 12;
    totalBullet.label.background.fill = totalSeries.stroke;
    totalBullet.label.background.fillOpacity = 0.0;
    totalBullet.label.padding(-5, -10, -5, -10);

    chart.legend = new am4charts.Legend();
    </script>
[end]



[divisions_mean_chart]


    <script>
            console.log("create divisions_mean_chart 11 sssssss");

    var d_otdelenie = #d_otdelenie#;
    var otd_cat = d_otdelenie;
    var chart = am4core.create("divisions_mean_chart", am4charts.XYChart);

    chart.data = otd_cat;
    console.log('===========otd_cat '+  JSON.stringify(otd_cat));
    chart.exporting.menu = new am4core.ExportMenu();

    console.log('!!!Stack 2');

    var categoryAxis = chart.yAxes.push(new am4charts.CategoryAxis());
    console.log('!!!Stack 3');

    categoryAxis.dataFields.category = "pname";
    categoryAxis.renderer.grid.template.location = 0;
    console.log('!!!Stack 4');

    var valueAxis = chart.xAxes.push(new am4charts.ValueAxis());
    valueAxis.renderer.labels.template.disabled = true;
    valueAxis.min = 0;
    valueAxis.numberFormatter = new am4core.NumberFormatter();
    valueAxis.numberFormatter.numberFormat = "#.#";
    valueAxis.title.text = "Сотрудников";
    valueAxis.extraMax =  0.1;
    valueAxis.calculateTotals = true;
    console.log('!!!Stack 5');


    // Create series
    function createSeries(field, name, s_color) {

        // Set up series
        var series = chart.series.push(new am4charts.ColumnSeries());
        if(typeof s_color === "undefined")
            {} else
             {
                series.fill =  s_color;
             };
        series.name = name;
        console.log('Create SERIES '+series.name +' '+series.tabindex);
        
        series.dataFields.valueX = field;
        series.dataFields.categoryY = "pname";
        series.sequencedInterpolation = true;
        series.calculatePercent = true;
        //series.cursorTooltipEnabled = false;

        // Make it stacked
        series.stacked = true;

        // Configure columns
        series.columns.template.width = am4core.percent(40);
        

        // Configure legend
        series.legendSettings.itemValueText = " {valueX.formatNumber('#')}т.р.";

        // Add label
        var labelBullet = series.bullets.push(new am4charts.LabelBullet());
        labelBullet.label.text = "[font-size:8px]{valueX.formatNumber('#')}т.р.%";
        labelBullet.locationX = 0.5;
        labelBullet.label.fill = am4core.color("#fff");

        return series;
    }
    chart.cursor = new am4charts.XYCursor();
    chart.cursor.behavior = "none";
    createSeries("m_fzp", "ФЗП");
    createSeries("m_stimul", "Стимул");
    createSeries("m_bonus", "Премия");
    createSeries("m_quartbonus", "кв.Премия");
    createSeries("m_otpusk", "Отпуск");
    createSeries("m_prochee", "Прочее");
    createSeries("m_greyzone", "Серая зона",'red');

    var totalSeries = chart.series.push(new am4charts.ColumnSeries());
    totalSeries.dataFields.valueX = "none";
    totalSeries.dataFields.categoryY = "category";
    totalSeries.stacked = true;
    totalSeries.hiddenInLegend = true;
    totalSeries.columns.template.strokeOpacity = 90;

    var totalBullet = totalSeries.bullets.push(new am4charts.LabelBullet());
    totalBullet.dy = -20;
    totalBullet.label.text = "{valueY.total}";
    totalBullet.label.hideOversized = false;
    totalBullet.label.fontSize = 12;
    totalBullet.label.background.fill = totalSeries.stroke;
    totalBullet.label.background.fillOpacity = 0.0;
    totalBullet.label.padding(-5, -10, -5, -10);

    chart.legend = new am4charts.Legend();
    </script>
[end]











[get full]

    select CONCAT('"',
	 id,'"',':{"pid":', pid,',',
	 '"name":"',str.short_name,'"},')
    as d_topdivs
    from  struktura str
    WHERE pid=#LAB_ID#
    AND VIEW1=1;


    select CONCAT('"',
	 sotr.tab_n,'"',
	 ':{"tpcode":', sotr.TopParent_code,
	 ',"stpcode":', sotr.subTopParent_code, 
	 ',"category":"', sotr.category,
	 '","post":"', sotr.post,
	 '","age":',YEAR(current_date)-YEAR(sotr.dr) ,
	 ',"stavka":', sotr.stavka,
	 ',"fired":', (sotr.datauvolen > current_date or sotr.datauvolen is NULL),
    '},')
    as d_sotr
    from sotrudniki sotr
    $INCLUDE utils.cfg[criteria] 
    ;

    select concat("{ pname:'",sotr.TopParent_Name,"','",
    category,
    "':",count(sotr.TopParent_Name), 
    "},")
    as d_otdelenie_category
    from sotrudniki sotr
    $INCLUDE utils.cfg[criteria] 
    group by sotr.TopParent_Name, category
    ORDER BY sotr.TopParent_Name;






   select concat("{ pname:'",sotr.TopParent_Name,"'",  
    Средняя зарплата ??
        ", v1:0",
    Средний возраст ??
        ", v2:",  round( sum(((year(now())-year(sotr.dr)))) div count(sotr.TopParent_Name),0) ,
    Всего дюдей ??
        ", v3:",count(sotr.TopParent_Name),
        "},") 
        as d_otdelenie_age_salary
    from sotrudniki sotr
    $INCLUDE utils.cfg[criteria] 
    group by sotr.TopParent_Name
 ;

   select concat("{ pname:'",sotr.TopParent_Name,"'",  
    Средняя зарплата ??
        ", v1:0",
    Средний возраст ??
        ", v2:",  round( sum(((year(now())-year(sotr.dr)))) div count(sotr.TopParent_Name),0) ,
    Всего дюдей ??
        ", v3:",count(sotr.TopParent_Name),
        "},") 
        as d_otdelenie_age_salary_new
    from sotrudniki sotr
    $INCLUDE utils.cfg[criteria] 
    group by sotr.TopParent_Name
 ;





   select concat("{ pname:'",
       (select short_name from struktura where id=subTopParent_code),
       subTopParent_code, ??
    "'",  
    Средняя зарплата ??
        ", v1:0", 
    Средний возраст ??
        ", v2:",sum(((year(now())-year(sotr.dr)))) div count(sotr.subTopParent_code),
    Всего дюдей ??
        ", v3:",count(sotr.subTopParent_code),
        "},") 
        as d_otdel_age_salary
    from sotrudniki sotr
    
    $INCLUDE utils.cfg[criteria] 
    group by sotr.subTopParent_code
 ;
   select concat("{ pname:'",sotr.category,"'",  
    Средняя зарплата ??
        ", m_pay:",0,
    Средний возраст ??
        ", m_age:",round( sum(((year(now())-year(sotr.dr)))) / count(sotr.category),1),
    Всего дюдей ??
        ", cnt:",count(sotr.category),
        ", st_sum:",sum(sotr.stavka),
        "},") 
        as d_category
    from sotrudniki sotr
    $INCLUDE utils.cfg[criteria] 
    group by sotr.category
 ;
По должностям ??
   select concat("{ pname:'",sotr.post,"'",  
    Средняя зарплата ??
        ", m_pay:",0,
    Средний возраст ??
        ", m_age:",round( sum(((year(now())-year(sotr.dr)))) / count(sotr.post),1),
    Всего дюдей ??
        ", cnt:",count(sotr.post),
        ", st_sum:",sum(sotr.stavka),
        "},") 
        as d_post
    from sotrudniki sotr
    $INCLUDE utils.cfg[criteria] 
    group by sotr.post
    order by sotr.post
 ;
По должностям по отделениям??
   select concat(
        
        
        "{ pname:'",sotr.post,"'",  
    Средняя зарплата ??
        ", m_pay:",0,
    Средний возраст ??
        ", m_age:",round( sum(((year(now())-year(sotr.dr)))) / count(sotr.post),1),
    Всего дюдей ??
        ", cnt:",count(sotr.post),
        ", st_sum:",sum(sotr.stavka),
        "},") 
        as d_post
    from sotrudniki sotr
    $INCLUDE utils.cfg[criteria] 
    group by sotr.post
    order by sotr.post
 ;








Распределение по возрасту ??
    delete from tmp_age;
    insert into tmp_age  
(
select ((year(NOW())-year(sotr.dr)) div  5) * 5 as yo,stavka, 0
from sotrudniki sotr
        $INCLUDE utils.cfg[criteria] 
)
    ;

    select concat("{ pname:' ",yo,  "', value:",  1 div(count(yo)*100),  ", cnt:", sum(stavka),  ", salary:",round( sum(itogo_n)/(sum(stavka)),0),"},") as d_age
    from tmp_age
    group by yo
    ;
    
select  round( sum(yo*stavka)/(sum(stavka)),2) as mean_age, 
	concat(round( sum(itogo_n)/(sum(stavka)),0),"т.р.") as mean_salary
    from tmp_age;

  select concat("{ pname:'",sotr.TopParent_Name,  "', cnt:",sum(stavka),"},")
         as d_otdelenie
    from sotrudniki sotr
    $INCLUDE utils.cfg[criteria] 
     and sotr.TopParent_Name not like ('Рук%') and sotr.TopParent_Name not like ('%Гр. Сов.%') 
    group by sotr.TopParent_Name
 ;
top parent and all ??
  select concat("{ pname:'",sotr.TopParent_Name,
    "', st_sum:",
	 sum(stavka),
    ", cnt:",count(stavka)
  , "},")
         as d_full_lab
    from sotrudniki sotr
    $INCLUDE utils.cfg[criteria] 
    and sotr.TopParent_Name not like ('Рук%') and sotr.TopParent_Name not like ('%Гр. Сов.%') 
    group by sotr.TopParent_Name
    UNION 
    select concat("{ pname:'ЛФВЭ', st_sum:",
	 sum(stavka),
    ", cnt:",count(stavka)
  , "},")
         as d_full_lab
    from sotrudniki sotr
    $INCLUDE utils.cfg[criteria] 
 ;

   select concat("{ pname:'",
    (select short_name from struktura where id=subTopParent_code),
     "', value:",sum(ifnull(oklad.oklad,0)+ifnull(oklad.kompens,0)+ifnull(oklad.dopl_stepen,0)) div 1000,"},\n") 
    as d_otdel
    from sotrudniki sotr
    left join oklad on sotr.tab_n=oklad.tab_n
    $INCLUDE utils.cfg[criteria] 
    group by sotr.subTopParent_code
 ;


 новый расклад по возрасту и категориям??
   delete from tmp_age_cat_div;
    insert into tmp_age_cat_div  
	 (yo,stavka,itogo_n,topdiv_code,topdiv_name,cat)
	 (
    SELECT  ( (year(NOW())-year(sotr.dr)) div  5) * 5
	  ,stavka, 0,sotr.TopParent_code,'', sotr.category
    from sotrudniki sotr
    $INCLUDE utils.cfg[criteria] 
      AND (sotr.datauvolen > current_date or sotr.datauvolen is NULL)
    )
    ;
    select CONCAT("{", '"pname":',yo,  ',"',  cat,  '":', round(sum(stavka),1),  ', "salary":',round( sum(itogo_n)/(sum(stavka)),0),"},") as d_age_new
    from tmp_age_cat_div
    group by yo, cat
    order by yo
    ;

    select  round( sum(yo*stavka)/(sum(stavka)),2) as mean_age_1, 
	concat(round( sum(itogo_n)/(sum(stavka)),0),"т.р.") as mean_salary_1
    from tmp_age_cat_div;



[end]

 



[get otdels]
[end]

[get Totals]
[end]

