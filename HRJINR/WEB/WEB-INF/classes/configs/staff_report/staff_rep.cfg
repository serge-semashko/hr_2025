[comments]
[end]

[description]
[end]
[parameters]
    init_134_zoom=3
    plan_building_id=4635
    top_div_id=600000
[end]



[report]
<!DOCTYPE html>
<html>
  <head>
    <script src="https://cdn.amcharts.com/lib/4/core.js"></script>
    <script src="https://cdn.amcharts.com/lib/4/charts.js"></script>
    <script src="https://cdn.amcharts.com/lib/4/themes/animated.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script src="staff_report/chart_otd_years_2018_1.js"></script>
    <script src="staff_report/chart_otd_years_2018_2.js"></script>
    <script src="staff_report/chart_otd_years_2018_3.js"></script>
    <script src="staff_report/chart_otd_years_2018_4.js"></script>
    <script src="staff_report/chart_otd_years_2018_5.js"></script>
    <script src="staff_report/chart_otd_years_2019_1.js"></script>
    <script src="staff_report/chart_otd_years_2019_2.js"></script>
    <script src="staff_report/chart_otd_years_2019_3.js"></script>
    <script src="staff_report/chart_otd_years_2019_4.js"></script>
    <script src="staff_report/chart_otd_years_2019_5.js"></script>
    <script src="staff_report/chart_otd_years_2020_1.js"></script>
    <script src="staff_report/chart_otd_years_2020_2.js"></script>
    <script src="staff_report/chart_otd_years_2020_3.js"></script>
    <script src="staff_report/chart_otd_years_2020_4.js"></script>
    <script src="staff_report/chart_otd_years_2020_5.js"></script>
    <script src="staff_report/chart_otd_years_2021_1.js"></script>
    <script src="staff_report/chart_otd_years_2021_2.js"></script>
    <script src="staff_report/chart_otd_years_2021_3.js"></script>
    <script src="staff_report/chart_otd_years_2021_4.js"></script>
    <script src="staff_report/chart_otd_years_2021_5.js"></script>
    <script src="staff_report/chart_otd_years_2022_1.js"></script>
    <script src="staff_report/chart_otd_years_2022_2.js"></script>
    <script src="staff_report/chart_otd_years_2022_3.js"></script>
    <script src="staff_report/chart_otd_years_2022_4.js"></script>
    <script src="staff_report/chart_otd_years_2022_5.js"></script>
    <script src="staff_report/chart_otd_years_2023_1.js"></script>
    <script src="staff_report/chart_otd_years_2023_2.js"></script>
    <script src="staff_report/chart_otd_years_2023_3.js"></script>
    <script src="staff_report/chart_otd_years_2023_4.js"></script>
    <script src="staff_report/chart_otd_years_2023_5.js"></script>
    <script src="staff_report/chart_otd_years_2024_1.js"></script>
    <script src="staff_report/chart_otd_years_2024_2.js"></script>
    <script src="staff_report/chart_otd_years_2024_3.js"></script>
    <script src="staff_report/chart_otd_years_2024_4.js"></script>
    <script src="staff_report/chart_otd_years_2024_5.js"></script>
    <!-- <script src="testdata.js"></script> -->
    <meta charset="UTF-8" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/css/all.min.css"
    />
  </head>
  <body>
    <script></script>
    <style>
      .build_radio {
        padding: 1px;
        margin-left: 10px;
      }

      .content_left {
        float: left; /* Обтекание по правому краю */
        border: 1px solid black; /* Параметры рамки */
        padding: 10px; /* Поля вокруг текста */
        margin-right: 10px; /* Отступ справа */
        width: 75%; /* Ширина блока */
      }
      .filter_left {
        /* position: fixed; */
        top: 80px;
        left: 80%;
        /* background1: blue; */
        float: left; /* Обтекание по правому краю */
        border: 1px solid black; /* Параметры рамки */
        padding: 10px; /* Поля вокруг текста */
        margin-right: 10px; /* Отступ справа */
        width: 20%; /* Ширина блока */
      }
    </style>
    <style>
      /* Убираем стандартный маркер Firefox */
      details > summary {
        list-style: none;
      }

      /* Добавляем собственный маркер для закрытого состояния */
      details > summary:before {
        content: "\f0fe";
        font-family: "Font Awesome 5 free";
        margin-right: 7px;
      }

      /* Добавляем собственный маркер для открытого состояния */
      details[open] > summary:before {
        content: "\f146";
        font-family: "Font Awesome 5 free";
        margin-right: 7px;
      }
    </style>
    <script>
        function toHex (x){
          let hex = Math.round(x * 255).toString(16);
          return hex.length === 1 ? "0" + hex : hex;
        };

      function hsvToHex(hsv) {
        if (hsv === undefined){
          hsv=[0,0,1]
        }
        h = hsv[0];
        s = hsv[1];
        v = hsv[2];
        var r, g, b;
        h /= 360;
        var i = Math.floor(h * 6);
        var f = h * 6 - i;
        var p = v * (1 - s);
        var q = v * (1 - f * s);
        var t = v * (1 - (1 - f) * s);

        switch (i % 6) {
          case 0:
            (r = v), (g = t), (b = p);
            break;
          case 1:
            (r = q), (g = v), (b = p);
            break;
          case 2:
            (r = p), (g = v), (b = t);
            break;
          case 3:
            (r = p), (g = q), (b = v);
            break;
          case 4:
            (r = t), (g = p), (b = v);
            break;
          case 5:
            (r = v), (g = p), (b = q);
            break;
        }
        return '##'+toHex(r)+toHex(g)+toHex(b);
      }

      function hslToHex(h, s, l) {
        h /= 360;
        s /= 100;
        l /= 100;
        let r, g, b;
        if (s === 0) {
          r = g = b = l; // achromatic
        } else {
          const hue2rgb = (p, q, t) => {
            if (t < 0) t += 1;
            if (t > 1) t -= 1;
            if (t < 1 / 6) return p + (q - p) * 6 * t;
            if (t < 1 / 2) return q;
            if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
            return p;
          };
          const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
          const p = 2 * l - q;
          r = hue2rgb(p, q, h + 1 / 3);
          g = hue2rgb(p, q, h);
          b = hue2rgb(p, q, h - 1 / 3);
        }
        let retval =  '##'+toHex(r)+toHex(g)+toHex(b);
        debugger;
        return retval;
      }
    </script>
    <script>
      var categoryAxis = "",
        valueAxis = "";
      function showels(elname) {
        for (i in stat_new) {
          if ("pname" in stat_new[i]) {
            // console.log(JSON.stringify(stat_new[i]));
          }
        }
      }

      function set_filter_visible() {
        let seldate = document.querySelector(
          'input[name="date_selected_for_draw_list"]:checked'
        ).value;
        eval("stat_new = " + seldate);
        debugger;

        try {
          let nm;
          let el;
          let chk;
          let top_div_check = false;
          let show_post = [];
          let show_cat = [];
          // debugger;

          let post_check = document.getElementsByName(
            "post_selected_for_draw_list"
          );

          for (let ic = 0; ic < post_check.length; ic++) {
            if (post_check[ic].checked) {
              show_post.push(post_check[ic].value);
            }
          }

          let cat_check = document.getElementsByName(
            "cat_selected_for_draw_list"
          );

          for (let ic = 0; ic < cat_check.length; ic++) {
            if (cat_check[ic].checked) {
              show_cat.push(cat_check[ic].value);
            }
          }

          for (let i in stat_new) {
            el = stat_new[i];
            el.pname = el._pname;
            stat_new[i] = el;
          }
          let divs_check = document.getElementsByName(
            "divs_selected_for_draw_list"
          );
          for (let ic = 0; ic < divs_check.length; ic++) {
            chk = divs_check[ic];
            top_div_check = chk.value.indexOf("_") < 0;
            for (i in stat_new) {
              el = stat_new[i];

              nm = el._pname;

              if ((nm.indexOf("СК") > -1) & (chk.value.indexOf("НТОП") > -1)) {
              }

              if (nm == undefined) {
                continue;
              }
              if (top_div_check & !("pidcode" in el)) {
                if (nm.indexOf(chk.value) == 0) {
                  if (!chk.checked) {
                    delete el["pname"];
                    stat_new[i] = el;
                  }
                }
              }
              if (!top_div_check & ("pidcode" in el)) {
                if (nm.indexOf(chk.value) == 0) {
                  if (!chk.checked) {
                    delete el["pname"];
                    stat_new[i] = el;
                  }
                }
              }
            }
          }

          // console.log(" div filter");
          showels("СК");
          // console.log("/div filter");

          for (i in stat_new) {
            el = stat_new[i];
            if (!("pname" in el)) {
              continue;
            }
            nm = el._pname;
            let catspace =
              (el.space.indexOf("all") > -1) | (el.space.indexOf("cat") > -1);
            if (!catspace) {
              continue;
            }
            nm = el._pname.split("_");
            nm = nm[nm.length - 1];
            // console.log('compare post'+nm+' show_cat');
            let cat_ind = show_cat.indexOf(nm);
            if (cat_ind < 0) {
              delete el["pname"];
              stat_new[i] = el;
              // console.log(nm+' убираем '+JSON.stringify(el))
            } else {
              // console.log(nm+' оставляем '+JSON.stringify(el))
            }
          }
          // console.log(" ================cat filter");
          showels("СК");
          // console.log("===========/cat filter");

          for (i in stat_new) {
            el = stat_new[i];
            if (!("pname" in el)) {
              continue;
            }

            if (el.space != "post") {
              continue;
            }
            nm = el._pname.split("_");
            nm = nm[nm.length - 1];
            // console.log('compare post'+nm+' show_post');
            let post_ind = show_post.indexOf(nm);
            if (post_ind < 0) {
              delete el["pname"];
              stat_new[i] = el;
              // console.log(nm + " delete " + JSON.stringify(el));
            } else {
              // console.log(nm + " оставляем " + JSON.stringify(el));
            }
          }

          // console.log(" ================post filter");
          showels("СК");
          // console.log("===========/post filter");

          chart.data = {};
          chart.reinit();
          chart.data = stat_new;
          // console.log(JSON.stringify(stat_new));
          fix_chart_size(chart, "divisions_mean_chart");
        } catch (e) {
          document.clear();
          document.write(
            "<h1>Приносим извинения. В процессе заполнения фильтра возникла ошибка"
          );
          document.write(
            " Просьба переслать содержимое ошибки по адресам semashko@jinr.ru, vmorozov@jinr.ru"
          );
          document.write("<br>Ошибка:<br>");
          document.write(e.message + "<br>");
          document.write(e.stack + "<br>");
        }
      }
    </script>
    <script>
      var last_topcode = "",
        last_topname = "";
      function find_pcode(pname, pid) {
        let an = pname.split("_");
      }
    </script>
    <script>
      var stat_new = -1;
      function preprocess_data(devider) {
        // console.log(" before processed &sorted " + JSON.stringify(stat_new));
        for (bar in stat_new) {
          // console.log(" process " + JSON.stringify(stat_new[bar]));

          if (stat_new[bar]["pname"].indexOf("_") < 0) {
            if ("pidcode" in stat_new[bar]) {
              last_subtopcode = stat_new[bar].pcode;
              last_subtopname = stat_new[bar].pname;
              stat_new[bar].pname = last_topname + "_" + stat_new[bar].pname;
            }
            if (!("pidcode" in stat_new[bar])) {
              last_topcode = stat_new[bar].pcode;
              last_topname = stat_new[bar].pname;
            }
            stat_new[bar]["pname"] =
              stat_new[bar]["pname"] + "_ВСЕ КАТЕГОРИИ И ДОЛЖНОСТИ";
          } else {
            if ("pidcode" in stat_new[bar]) {
              stat_new[bar].pname = last_topname + "_" + stat_new[bar].pname;
            }
          }
          stat_new[bar]._pname = stat_new[bar].pname;

          if (!("pcode" in stat_new[bar])) {
            //   stat_new[bar].pcode = find_pcode(stat_new[bar].pname, last_pid);
            //   stat_new[bar].pname = last_topname+'_'+
          }
          stat_new[bar].m_fzp = isNaN(stat_new[bar].m_fzp)
            ? 0
            : stat_new[bar].m_fzp / devider;
          stat_new[bar].none = isNaN(stat_new[bar].none)
            ? 0
            : stat_new[bar].none;
          stat_new[bar].m_stimul = isNaN(stat_new[bar].m_stimul)
            ? 0
            : stat_new[bar].m_stimul / devider;
          stat_new[bar].m_bonus = isNaN(stat_new[bar].m_bonus)
            ? 0
            : stat_new[bar].m_bonus / devider;
          stat_new[bar].m_quartbonus = isNaN(stat_new[bar].m_quartbonus)
            ? 0
            : stat_new[bar].m_quartbonus / devider;
          stat_new[bar].m_otpusk = isNaN(stat_new[bar].m_otpusk)
            ? 0
            : stat_new[bar].m_otpusk / devider;
          // stat_new[bar].m_prochee = isNaN(stat_new[bar].m_prochee)
          //   ? 0
          //   : stat_new[bar].m_prochee;
          stat_new[bar].m_greyzone = isNaN(stat_new[bar].m_greyzone)
            ? 0
            : stat_new[bar].m_greyzone / devider;
          let paysum = +stat_new[bar]["m_paysum"] / devider;
          // stat_new[bar].m_fzp = stat_new[bar].m_fzp+stat_new[bar].m_prochee;
          let pay_cat =
            +stat_new[bar]["m_fzp"] +
            +stat_new[bar]["m_bonus"] +
            +stat_new[bar]["m_otpusk"] +
            +stat_new[bar]["m_quartbonus"] +
            +stat_new[bar]["m_stimul"];
          stat_new[bar].m_greyzone = paysum - pay_cat;
          stat_new[bar]["m_fzp"] += +stat_new[bar]["m_otpusk"];
          stat_new[bar]["m_bonus"] +=stat_new[bar]["m_quartbonus"];


          for (i in stat_new[bar]) {
            if (i.indexOf("code" < 0)) {
              if (!isNaN(stat_new[bar][i])) {
                stat_new[bar][i] = parseInt(stat_new[bar][i] / 1000);
              }
            }
            // console.log('for (i in stat_new[bar]) ' + i + ' = ' + stat_new[bar][i] + ' checknan ' + isNaN(stat_new[bar][i]));
          }
          if (stat_new[bar]["paysum"] == 0) {
            delete stat_new[bar]["pname"];
          }
        }
        // stat_new.sort(function (a, b) {
        //   // console.log(JSON.stringify(a)+' '+JSON.stringify(b))
        //   let res = 0;
        //   if (a.pname < b.pname) {
        //     res = 1;
        //   } else {
        //     res = -1;
        //   }
        //   return res;
        // });
        // console.log(" sorted " + JSON.stringify(stat_new));
      }
      var posts = [
        "аппаратчик воздухоразделения",
        "аппаратчик ожижения водорода и гелия",
        "бухгалтер",
        "ведущий бухгалтер",
        "ведущий инженер",
        "ведущий инженер по охране труда",
        "ведущий конструктор",
        "ведущий научный сотрудник",
        "ведущий переводчик",
        "ведущий программист",
        "ведущий специалист",
        "ведущий специалист по делопроизводству",
        "ведущий специалист по персоналу",
        "ведущий технолог",
        "ведущий экономист",
        "ведущий электроник",
        "гальваник",
        "главный инженер инжекционного комплекса",
        "главный инженер лаборатории",
        "главный инженер ускорительного комплекса NICA",
        "главный инженер установки",
        "главный конструктор",
        "главный научный сотрудник",
        "главный технический специалист",
        "гравер",
        "директор лаборатории",
        "заведующий складом",
        "заведующий техническим архивом",
        "заведующий хозяйством",
        "заместитель главного инженера лаборатории",
        "заместитель директора лаборатории по научной работе",
        "заместитель начальника бюро",
        "заместитель начальника отдела",
        "заместитель начальника отдела по хозяйственным вопросам",
        "заместитель начальника отделения по научной работе",
        "заместитель начальника службы",
        "заместитель начальника цеха",
        "заточник",
        "и.о.ведущего научного сотрудника",
        "и.о.директора центра",
        "и.о.младшего научного сотрудника",
        "инженер",
        "инженер 2 категории",
        "инженер-конструктор",
        "инженер-конструктор 1 категории",
        "инженер-конструктор 2 категории",
        "инженер-конструктор 3 категории",
        "инженер-механик",
        "инженер-программист",
        "инженер-программист 1 категории",
        "инженер-программист 2 категории",
        "инженер-программист 3 категории",
        "инженер-технолог",
        "инженер-технолог 1 категории",
        "инженер-технолог 2 категории",
        "инженер-технолог 3 категории",
        "инженер-химик",
        "инженер-электроник",
        "инженер-электроник 1 категории",
        "инженер-электроник 2 категории",
        "инспектор",
        "испытатель баллонов",
        "кладовщик инструментальной кладовой",
        "консультант",
        "консультант при дирекции лаборатории",
        "лаборант",
        "лаборант обработки фильмовой информации физического эксперимента",
        "лаборант ускорительной установки",
        "лаборант физической лаборатории",
        "лаборант химико-технологических исследований",
        "лаборант химического анализа",
        "маляр",
        "мастер",
        "машинист компрессорных установок",
        "машинист крана (крановщик)",
        "машинист по стирке и ремонту спецодежды",
        "машинист холодильных установок",
        "механик цеха",
        "механик экспериментальных стендов и установок",
        "младший научный сотрудник",
        "монтажник радиоэлектронной аппаратуры и приборов",
        "монтажник санитарно-технических систем и оборудования",
        "монтажник технологического оборудования и связанных с ним конструкций",
        "научный сотрудник",
        "научный сотрудник - постдок",
        "начальник бюро",
        "начальник группы",
        "начальник отдела",
        "начальник отделения",
        "начальник сектора",
        "начальник службы",
        "начальник цеха",
        "озеленитель",
        "оператор станков с программным управлением",
        "оператор экспериментальных стендов и установок",
        "переводчик",
        "плотник",
        "подсобный рабочий",
        "полировщик",
        "помощник директора лаборатории по капитальному строительству",
        "помощник директора лаборатории по общим вопросам",
        "помощник директора лаборатории по развитию информационных технологий",
        "помощник директора лаборатории по реализации крупных инфраструктурных проектов",
        "помощник директора лаборатории по ускорительному комплексу и реализуемым экспериментам",
        "помощник директора лаборатории по финансовым вопросам",
        "помощник начальника цеха по хозяйственным вопросам",
        "почетный директор лаборатории",
        "сверловщик",
        "секретарь-референт",
        "слесарь аварийно-восстановительных работ",
        "слесарь механосборочных работ",
        "слесарь по контрольно-измерительным приборам и автоматике",
        "слесарь по ремонту и обслуживанию систем вентиляции и кондиционирования",
        "слесарь-ремонтник",
        "советник",
        "советник директора лаборатории",
        "советник при дирекции лаборатории",
        "специалист",
        "специалист по делопроизводству",
        "специалист по материальному учету и контролю",
        "специалист по персоналу",
        "специалист по работе с документами",
        "специалист по технической документации",
        "стажер-исследователь",
        "станочник широкого профиля",
        "старший бухгалтер",
        "старший инженер",
        "старший инженер по охране труда",
        "старший инспектор",
        "старший лаборант",
        "старший мастер",
        "старший научный сотрудник",
        "старший специалист",
        "старший специалист по делопроизводству",
        "старший специалист по материальному учету и контролю",
        "старший специалист по подготовке и контролю заявок на закупку",
        "старший специалист по работе с документами",
        "старший техник",
        "старший товаровед",
        "столяр",
        "техник",
        "техник 1 категории",
        "техник 2 категории",
        "токарь",
        "токарь-расточник",
        "тракторист",
        "уборщик производственных помещений",
        "ученый секретарь лаборатории",
        "фрезеровщик",
        "художник",
        "электрогазосварщик",
        "электромонтер по обслуживанию электрооборудования",
        "электромонтер по ремонту и обслуживанию электрооборудования",
        "электросварщик ручной сварки",
      ];

      var topdivs = [
        { 
          color_hsv: [0,0.8,1],
          pname: "Рук.", pcode: 101000, subdivs: {} },
        {
          color_hsv: [0,0.8,1],
          pname: "Гр. Сов. и К.",
          pcode: 102000,
          subdivs: {},
        },
        {
          color_hsv: [16,1,1],
          pname: "СИСТ",
          pcode: 103000,
          subdivs: {},
        },
        {
          color_hsv: [16,0.6,1],
          pname: "ИЭТО",
          pcode: 189000,
          subdivs: {
            189003: { pname: "Группа №3" },
            189004: { pname: "Группа №4" },
            189002: { pname: "Группа №2" },
            189001: { pname: "Группа №1" },
          },
        },
        {
          color_hsv: [338,1,1],
          pname: "АХП",
          pcode: 190000,
          subdivs: {
            192000: { pname: "Х.O." },
            191000: { pname: "Адм. бюро" },
          },
        },
        {
          color_hsv: [347,0.5,1],
          pname: "ПФБ",
          pcode: 195000,
          subdivs: {
            195003: { pname: "Группа №3" },
            195002: { pname: "Группа №2" },
            195001: { pname: "Группа №1" },
          },
        },

        {
          color_hsv: [80,1,1],
          pname: "Отд.№1",
          show: true,
          pcode: 110000,
          subdivs: {
            111000: {color_hsv: [70,1,1], pname: "НЭОУС" },
            112000: {color_hsv: [70,0.8,0.8], pname: "НЭОИФПУ" },
            113000: {color_hsv: [70,0.4,1], pname: "НТОП" },
            114000: {color_hsv: [90,1,1], pname: "НЭОИКН" },
            115000: {color_hsv: [90,0.8,0.8], pname: "НЭОРС" },
            116000: {color_hsv: [90,0.4,1], pname: "НИОСЭН" },
            117000: {color_hsv: [135,1,1], pname: "НИКО" },
            125000: {color_hsv: [135,0.8,0.8], pname: "ДСН" },
            126000: {color_hsv: [135,0.4,1], pname: "НЭСОП" },
            129000: {color_hsv: [165,1,1], pname: "НЭОСМТ" }
          },
        },
        {
          pname: "Отд.№2",
          pcode: 120000,
          show: true,
          subdivs: {
            122000: {color_hsv: [195,1,1], pname: "НЭОФТИ" },
            123000: {color_hsv: [195,0.75,1], pname: "НЭОСФМС" },
            124000: {color_hsv: [195,0.55,1], pname: "СФСКЯ" },
            127000: {color_hsv: [210,0.2,1], pname: "НЭОТиМПП" },
          },
        },
        {
          pname: "Отд.№3",
          show: true,
          pcode: 130000,
          subdivs: {
            135000: {color_hsv: [245,1,1], pname: "НЭОФСТИ" },
            121000: {color_hsv: [245,0.75,1], pname: "НЭОMД" },
            136000: {color_hsv: [245,0.55,1], pname: "НЭОССАиРП" },
            137000: {color_hsv: [245,0.2,1], pname: "НЭОБМ" },
          },
        },
        {
          pname: "Отд.№4",
          show: true,
          pcode: 140000,
          subdivs: {
            142000: {color_hsv: [270,1,1], pname: "НЭОФТИ  LHC" },
            134000: {color_hsv: [270,0.75,1], pname: "Сф на АТЛАС" },
            141000: {color_hsv: [270,0.55,1], pname: "НЭОФТИ  RHIC" },
            132000: {color_hsv: [270,0.2,1], pname: "НЭОФ на CMS" },
          },
        },
        {
          pname: "Отд.№5",
          show: true,
          pcode: 150000,
          subdivs: {
            157000: {color_hsv: [300,1,1], pname: "СК" },
            156000: {color_hsv: [300,0.75,1], pname: "СРС" },
            158000: {color_hsv: [300,0.55,1], pname: "НМОКТС" },
            151000: {color_hsv: [300,0.2,1], pname: "НЭОАФИ" },
          },
        },
        {
          pname: "Отд.№6",
          show: true,
          pcode: 170000,
          subdivs: {
            172000: {color_hsv: [31,1,1], pname: "ЦОЭП" },
            171000: {color_hsv: [31,0.75,0.8], pname: "КО" },
            176000: {color_hsv: [31,0.4,1], pname: "САСУТП ЛФВЭ" },
            170010: {color_hsv: [31,0.2,1], pname: "ГВвЭОиРД" },
          },
        },
        {color_hsv: [45,1,1], pname: "ПKO", pcode: 175000, subdivs: {} }
      ];
      var ocnt = 0;
      for (tdiv in topdivs) {
        ocnt += 1;
        if (topdivs[tdiv].pname.indexOf("Отд.") > -1) {
          topdivs[tdiv].subcnt = Object.keys(topdivs[tdiv].subdivs).length;
          ocnt += topdivs[tdiv].subcnt;
        }
      }
      // document.write("<br>Отделов " + ocnt);
    </script>
    <script>
      function checkAll(name, checked) {
        name = name + "_list";
        var cbs = document.getElementsByName(name);
        debugger;
        for (var i = 0; i < cbs.length; i++) {
          cbs[i].checked = checked;
        }
        set_filter_visible();
      }
    </script>
    <script>
      function create_post_list() {
        let block = '<details open=""><summary>';
        block += "Должности";
        block +=
          '<input type=checkbox name=post_selected_for_draw onchange="checkAll(this.name,this.checked,this)"  >Все';
        block += "</summary>";
        for (let post of posts) {
          block +=
            '<input  onchange="set_filter_visible();" name=post_selected_for_draw_list type=checkbox value="' +
            post +
            '">' +
            post +
            "<br>";
        }
        block += "</details>";
        return block;
      }
    </script>
    <script></script>
    <script>
      function create_date_list() {
        let div = document.getElementById("date_list");
        let block = '<details open=""><summary>';
        block += "Год и квартал";
        block += "</summary>";

        for (let p_y = 2018; p_y < 2038; p_y++) {
          for (let p_q = 1; p_q <= 5; p_q++) {
            // let str = ' <script src="staff_report/chart_otd_years_';
            // str += p_y + "_" + p_q;
            // str += '.js">';
            // str += "</" + "script>";
            // div.innerHTML = str;
            // import  ('./staff_report/chart_otd_years_'+p_y+'_'+p_q+'.js');
            if (window["ch_" + p_y + "_q" + p_q] === undefined) {
              break;
            }

            eval("var d" + p_y + "_q" + p_q + "    = ch_" + p_y + "_q" + p_q);
            eval("stat_new = ch_" + p_y + "_q" + p_q);
            if (p_q == 5) {
              preprocess_data(1);
            } else {
              preprocess_data(1);
            }

            block +=
              '<input name=date_selected_for_draw_list  onchange="set_filter_visible();" type=radio value=' +
              "ch_" +
              p_y +
              "_q" +
              p_q;
            if ((p_y == 2024) & (p_q == 1)) {
              block += " checked ";
            }
            block += ">" + p_y + " г. ";
            if (p_q < 5) {
              block += p_q + " квартал";
            } else {
              block += " за весь год";
            }
            block += "<br>";
          }
        }
        block += "</details>";
        return block;
        return block;
      }
    </script>
    <script>
      function create_div_list() {
        let block = '<details open=""><summary>';
        let subblock = "";
        let bcolor='';
        block +=
          'Подразделения <input type=checkbox name=divs_selected_for_draw onchange="checkAll(this.name,this.checked,this)"  >Все';
        block += "</summary>";
        for (i in topdivs) {
          if (topdivs[i].pname.trim().length > 1) {
            subblock = "";
            for (isub in topdivs[i].subdivs) {
              bcolor = hsvToHex(topdivs[i].subdivs[isub].color_hsv);
              subblock += "&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp" +  "<input  pcode="  + isub;
                subblock +=' onchange="set_filter_visible();" name=divs_selected_for_draw_list type=checkbox value="' +
                topdivs[i].pname +
                "_" + topdivs[i].subdivs[isub].pname + '">';
                subblock += '<em style=" background-color:'+bcolor+'; color:black'+'">' + topdivs[i].subdivs[isub].pname +   "</em><br>";
            }
            // debugger;

            if (subblock.length > 0) {
              block += "<details ><summary>";
            }
            bcolor = hsvToHex(topdivs[i].color_hsv);
            block += "<input  pcode=" + topdivs[i].pcode;
            if (topdivs[i].show) {
              block += " checked ";
            }

            block +=
              ' onchange="set_filter_visible();" name=divs_selected_for_draw_list type=checkbox value="' +
              topdivs[i].pname +
              '">';
            block  += '<em style=" background-color:'+bcolor+'; color:black'+'">' + topdivs[i].pname +   "</em><br>";
            if (subblock.length > 0) {
              block += "</summary>" + subblock + "</details>";
            }
          }
        }
        block += "</details>";
        return block;
      }
    </script>
    <script>
      function create_date_select() {
        let block = "<select nameid=select_date ";
      }
    </script>
    <div class="filter_left">
      <div id="date_list"></div>
      <div id="div_list"></div>
      <hr />
      <details open="">
        <summary>
          Категории
          <input
            type="checkbox"
            name="cat_selected_for_draw"
            onchange="checkAll(this.name,this.checked,this)"
          />
          Все
        </summary>
        <input
          checked
          onchange="set_filter_visible();"
          name="cat_selected_for_draw_list"
          type="checkbox"
          value="ВСЕ КАТЕГОРИИ И ДОЛЖНОСТИ"
        />
        ВСЕ КАТЕГОРИИ И ДОЛЖНОСТИ
        <br />
        <input
          onchange="set_filter_visible();"
          name="cat_selected_for_draw_list"
          type="checkbox"
          value="Специалисты"
        />
        Специалисты
        <br />
        <input
          onchange="set_filter_visible();"
          name="cat_selected_for_draw_list"
          type="checkbox"
          value="Научные и научно-педагогические работники"
        />
        Научные и научно-педагогические работники
        <br />
        <input
          onchange="set_filter_visible();"
          name="cat_selected_for_draw_list"
          type="checkbox"
          value="Рабочие"
        />
        Рабочие
        <br />
        <input
          onchange="set_filter_visible();"
          name="cat_selected_for_draw_list"
          type="checkbox"
          value="Руководители"
        />
        Руководители
        <br />
      </details>
      <hr />
      <div id="post_list"></div>
      <hr />
    </div>
    <div>
      <button
        onclick="debugger;var aa = totalSeries; var b=totalBullet;"
        value="debug"
      >
        debug
      </button>
    </div>
    <div
      class="content_left"
      style="width: 1100px; height: 1000px"
      id="divisions_mean_chart"
      style="margin-top: 10px; color: black; border: solid 3px black"
    ></div>
    <script>
      document.getElementById("div_list").innerHTML = create_div_list();
      document.getElementById("date_list").innerHTML = create_date_list();
      // console.log('asdfasdfsd'+document.getElementById("post_list"))
      document.getElementById("post_list").innerHTML = create_post_list();
    </script>
    <script>
      function fix_chart_size(chart, chartdiv) {
        let chdata = chart.data;
        let scnt = 0;
        let vis_list = "";
        let unvis_list = "";
        for (let i = 0; i < chart.data.length; i++) {
          if ("pname" in chart.data[i]) {
            vis_list += ", " + chart.data[i]._pname;
            scnt++;
          } else {
            unvis_list += ", " + chart.data[i]._pname;
          }
        }
        // debugger;
        // console.log("vis= " + vis_list);
        // console.log("UNVIS= " + unvis_list);
        let chdiv = document.getElementById(chartdiv);
        chdiv.style.height = 120 + scnt * 43 + "px";
        categoryAxis.renderer.labels.values.forEach((v) => (v.visible = false));
        // debugger;
      }
    </script>
    <script>
      var pay_colors = {
        m_fzp: hslToHex((360 * 1) / 8, 70, 50),
        m_stimul: hslToHex((360 * 2) / 8, 30, 50),
        m_bonus: hslToHex((360 * 3) / 8, 70, 50),
        m_quartbo: hslToHex((360 * 4) / 8, 70, 50),
        m_otpusk: hslToHex((360 * 5) / 8, 70, 50),
        // m_prochee: hslToHex((360 * 6) / 8, 70, 50),
        m_greyzone: hslToHex((360 * 7) / 8, 70, 50),
      };
    </script>
    <script>
      console.log(
        "Chart 7. Подразделения. Распределение по средним начислениям по видам "
      );

      var chart = am4core.create("divisions_mean_chart", am4charts.XYChart);
      chart.maskBullets = false;
      chart.data = stat_new;

      // console.log(JSON.stringify(stat_new));
      chart.exporting.menu = new am4core.ExportMenu();
      categoryAxis = chart.yAxes.push(new am4charts.CategoryAxis());

      categoryAxis.dataFields.category = "pname";
      // categoryAxis.renderer.grid.template.location = 45;
      categoryAxis.fontSize = 14;
      categoryAxis.minGridDistance = 0;
      categoryAxis.renderer.cellStartLocation = 0;
      categoryAxis.renderer.cellEndLocation = 0.9;
      categoryAxis.minVerticalGap = 0;
      categoryAxis.forceShowField = "pname";
      categoryAxis.parseDates = false;
      categoryAxis.tickLength = 1;

      categoryAxis.renderer.minLabelPosition = 0;
      //  categoryAxis.renderer.maxLabelPosition = 2;

      console.log("!!!Stack 4");

      valueAxis = chart.xAxes.push(new am4charts.ValueAxis());

      valueAxis.renderer.inside = true;
      valueAxis.renderer.labels.template.disabled = true;
      valueAxis.min = 0;
      valueAxis.extraMax = 0.1;
      valueAxis.calculateTotals = true;
      // valueAxis.renderer.labels.template.disabled = true;
      valueAxis.min = 0;
      valueAxis.numberFormatter = new am4core.NumberFormatter();
      valueAxis.numberFormatter.numberFormat = "##.##";
      valueAxis.title.text = "Начислено";
      valueAxis.extraMax = 0.1;
      valueAxis.calculateTotals = true;
      set_filter_visible();
      // console.log("!!!Stack 5");

      // Create series
      function createSeries(field, name, s_color) {
        // Set up series
        var series = chart.series.push(new am4charts.ColumnSeries());
        if (typeof s_color === "undefined") {
          series.fill = pay_colors[field];
        } else {
          series.fill = s_color;
        }
        series.name = name;
        // console.log("Create SERIES " + series.name + " " + series.tabindex);

        series.dataFields.valueX = field;
        series.dataFields.categoryY = "pname";
        series.sequencedInterpolation = true;
        series.calculatePercent = true;
        series.calculateTotal = true;
        series.cursorTooltipEnabled = false;

        // Make it stacked
        series.stacked = true;

        // Configure columns
        //series.columns.template.width = 10;
        // am4core.percent(40);

        // Configure legend
        series.legendSettings.itemValueText = " {valueX.formatNumber('##')}т.р.";

        // Add label
        // var labelBullet = series.bullets.push(new am4charts.LabelBullet());
        // labelBullet.label.text =
        // "[font-size:10px]{valueX.formatNumber('##')}т.р.";
        // labelBullet.locationX = 0.5;
        // labelBullet.label.fill = am4core.color("##fff");

        return series;
      }
      chart.cursor = new am4charts.XYCursor();
      chart.cursor.behavior = "none";
      createSeries("m_fzp", "ФЗП");
      createSeries("m_stimul", "Стимул");
      createSeries("m_bonus", "Премия");
//      createSeries("m_quartbonus", "кв.Премия");
//      createSeries("m_otpusk", "Отпуск");
      // createSeries("m_prochee", "Прочее");
      createSeries("m_greyzone", "Доплаты вне категорий", "red");

      var totalSeries = chart.series.push(new am4charts.ColumnSeries());
      totalSeries.dataFields.valueX = "none";
      totalSeries.dataFields.categoryY = "pname";
      totalSeries.stacked = true;
      totalSeries.hiddenInLegend = false;
      totalSeries.columns.template.strokeOpacity = 1;
      totalSeries.legendSettings.itemValueText =
        " Всего {valueX.total.formatNumber('##')}т.р.";
      totalSeries.fill = "white";

      var totalBullet = totalSeries.bullets.push(new am4charts.LabelBullet());
      totalBullet.showTooltipOn = "always";
      totalBullet.tooltipText =
        "[font-size:14px]{valueX.total.formatNumber('##')}т.р.";

      chart.legend = new am4charts.Legend();
      totalBullet.dx = 70;
      // debugger;
    </script>
  </body>
</html>
[end]