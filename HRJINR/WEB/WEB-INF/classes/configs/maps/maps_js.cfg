TEMPLATE


[old origscale134]
(function (factory, window) {

    // define an AMD module that relies on 'leaflet'
    if (typeof define === 'function' && define.amd) {
        define(['leaflet'], factory);

    // define a Common JS module that relies on 'leaflet'
    } else if (typeof exports === 'object') {
        module.exports = factory(require('leaflet'));
    }

    // attach your plugin to the global 'L' variable
    if (typeof window !== 'undefined' && window.L) {
        window.L.Control.ScaleFactor = factory(L);
        L.control.scalefactor = function (options) {
            return new window.L.Control.ScaleFactor(options);
        };
    }
}(function (L) {
    var ScaleFactor = L.Control.extend({
        options: {
            position: 'bottomleft',
            updateWhenIdle: true
        },

        onAdd: function (map) {
            var className = 'leaflet-control-scalefactor',
                container = L.DomUtil.create('div', className),
                options = this.options;

            this._mScale = L.DomUtil.create('div', className + '-line', container);

            map.on(options.updateWhenIdle ? 'moveend' : 'move', this._update, this);
            map.whenReady(this._update, this);

            return container;
        },

        onRemove: function (map) {
            map.off(this.options.updateWhenIdle ? 'moveend' : 'move', this._update, this);
        },

        _pxTOmm: (function () {
            var heightRef = document.createElement('div');
            heightRef.style = 'height:1mm;display:none';
            heightRef.id = 'heightRef';
            document.body.appendChild(heightRef);

            heightRef = document.getElementById('heightRef');
            var pxPermm = $('#heightRef').height();

            heightRef.parentNode.removeChild(heightRef);

            return function pxTOmm(px) {
                return px / pxPermm;
            }
        })(),

        _update: function () {
            var map = this._map;

            var CenterOfMap = map.getSize().y / 2;

            var RealWorlMetersPer100Pixels = map.distance(
                map.containerPointToLatLng([0, CenterOfMap]),
                map.containerPointToLatLng([100, CenterOfMap])
            );

            var ScreenMetersPer100Pixels = this._pxTOmm(100) / 1000;

            var scaleFactor = RealWorlMetersPer100Pixels / ScreenMetersPer100Pixels;

            //.replace formats the scale with commas 50000 -> 50,000
            this._mScale.innerHTML = '1:' + Math.round(scaleFactor).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        }

    });

    return ScaleFactor;
}, window));
[end]



[origscale134]
(function (factory, window) {

    // define an AMD module that relies on 'leaflet'
    if (typeof define === 'function' && define.amd) {
        define(['leaflet'], factory);

    // define a Common JS module that relies on 'leaflet'
    } else if (typeof exports === 'object') {
        module.exports = factory(require('leaflet'));
    }

    // attach your plugin to the global 'L' variable
    if (typeof window !== 'undefined' && window.L) {
        window.L.Control.ScaleFactor = factory(L);
        L.control.scalefactor = function (options) {
            return new window.L.Control.ScaleFactor(options);
        };
    }
}(function (L) {
    var ScaleFactor = L.Control.extend({
        options: {
            position: 'bottomleft',
            updateWhenIdle: true
        },
	onAdd: function (map) {
                console.log('onAdd');
		var className = 'leaflet-control-scale',
		    container = L.DomUtil.create('div', className),
		    options = this.options;

		this._addScales(options, className + '-line', container);

		map.on(options.updateWhenIdle ? 'moveend' : 'move', this._update, this);
		map.whenReady(this._update, this);

		return container;
	},

	onRemove: function (map) {
                console.log('onRemove');
		map.off(this.options.updateWhenIdle ? 'moveend' : 'move', this._update, this);
	},

	_addScales: function (options, className, container) {
                console.log('addscales');

		if (options.metric) {
			this._mScale = L.DomUtil.create('div', className, container);
		}
		if (options.imperial) {
			this._iScale = L.DomUtil.create('div', className, container);
		}
	},

	_update: function () {
                console.log('update');

		var map = this._map,
		    y = map.getSize().y / 2;
                console.log('update 1 '+map.containerPointToLatLng([0, y]) );
                console.log('update 1A '+this.options.maxWidth);
                   var aaa = this.options;
                        debugger;
                
                console.log('update 1A '+map.containerPointToLatLng([this.options.maxWidth, y]));
		var maxMeters = map.distance(
			map.containerPointToLatLng([0, y]),
			map.containerPointToLatLng([this.options.maxWidth, y]));
                console.log('update 2');

		this._updateScales(maxMeters);
                console.log('update 3');

	},

	_updateScales: function (maxMeters) {
                console.log('_updateScales');

		if (this.options.metric && maxMeters) {
			this._updateMetric(maxMeters);
		}
		if (this.options.imperial && maxMeters) {
			this._updateImperial(maxMeters);
		}
	},

	_updateMetric: function (maxMeters) {
                console.log('_updateMetric');

		var meters = this._getRoundNum(maxMeters),
		    label = meters < 1000 ? meters + ' m' : (meters / 1000) + ' km';

		this._updateScale(this._mScale, label, meters / maxMeters);
	},

	_updateImperial: function (maxMeters) {
                console.log('_updateImper');
		var maxFeet = maxMeters * 3.2808399,
		    maxMiles, miles, feet;

		if (maxFeet > 5280) {
			maxMiles = maxFeet / 5280;
			miles = this._getRoundNum(maxMiles);
			this._updateScale(this._iScale, miles + ' mi', miles / maxMiles);

		} else {
			feet = this._getRoundNum(maxFeet);
			this._updateScale(this._iScale, feet + ' ft', feet / maxFeet);
		}
	},

	_updateScale: function (scale, text, ratio) {
                console.log('_updateScale');

		scale.style.width = Math.round(this.options.maxWidth * ratio) + 'px';
		scale.innerHTML = text;
	},

	_getRoundNum: function (num) {
                console.log('_getRoundNum');
		var pow10 = Math.pow(10, (Math.floor(num) + '').length - 1),
		    d = num / pow10;

		d = d >= 10 ? 10 :
		    d >= 5 ? 5 :
		    d >= 3 ? 3 :
		    d >= 2 ? 2 : 1;

		return pow10 * d;
	}


    });

    return ScaleFactor;
}, window));
[end]




[lit134 scale]

/*
 * @class Control.Scale
 * @aka L.Control.Scale
 * @inherits Control
 *
 * A simple scale control that shows the scale of the current center of screen in metric (m/km) and imperial (mi/ft) systems. Extends `Control`.
 *
 * @example
 *
 * ```js
 * L.control.scale().addTo(map);
 * ```
 */

var Scale134 = L.Control.extend({
	// @section
	// @aka Control.Scale options
	options: {
		position: 'bottomleft',

		// @option maxWidth: Number = 100
		// Maximum width of the control in pixels. The width is set dynamically to show round values (e.g. 100, 200, 500).
		maxWidth: 100,

		// @option metric: Boolean = True
		// Whether to show the metric scale line (m/km).
		metric: true,

		// @option imperial: Boolean = True
		// Whether to show the imperial scale line (mi/ft).
		imperial: true

		// @option updateWhenIdle: Boolean = false
		// If `true`, the control is updated on [`moveend`](#map-moveend), otherwise it's always up-to-date (updated on [`move`](#map-move)).
	},

	onAdd: function (map) {
		var className = 'leaflet-control-scale',
		    container = DomUtil.create('div', className),
		    options = this.options;

		this._addScales(options, className + '-line', container);

		map.on(options.updateWhenIdle ? 'moveend' : 'move', this._update, this);
		map.whenReady(this._update, this);

		return container;
	},

	onRemove: function (map) {
		map.off(this.options.updateWhenIdle ? 'moveend' : 'move', this._update, this);
	},

	_addScales: function (options, className, container) {
		if (options.metric) {
			this._mScale = DomUtil.create('div', className, container);
		}
		if (options.imperial) {
			this._iScale = DomUtil.create('div', className, container);
		}
	},

	_update: function () {
		var map = this._map,
		    y = map.getSize().y / 2;

		var maxMeters = map.distance(
			map.containerPointToLatLng([0, y]),
			map.containerPointToLatLng([this.options.maxWidth, y]));

		this._updateScales(maxMeters);
	},

	_updateScales: function (maxMeters) {
		if (this.options.metric && maxMeters) {
			this._updateMetric(maxMeters);
		}
		if (this.options.imperial && maxMeters) {
			this._updateImperial(maxMeters);
		}
	},

	_updateMetric: function (maxMeters) {
		var meters = this._getRoundNum(maxMeters),
		    label = meters < 1000 ? meters + ' m' : (meters / 1000) + ' km';

		this._updateScale(this._mScale, label, meters / maxMeters);
	},

	_updateImperial: function (maxMeters) {
		var maxFeet = maxMeters * 3.2808399,
		    maxMiles, miles, feet;

		if (maxFeet > 5280) {
			maxMiles = maxFeet / 5280;
			miles = this._getRoundNum(maxMiles);
			this._updateScale(this._iScale, miles + ' mi', miles / maxMiles);

		} else {
			feet = this._getRoundNum(maxFeet);
			this._updateScale(this._iScale, feet + ' ft', feet / maxFeet);
		}
	},

	_updateScale: function (scale, text, ratio) {
		scale.style.width = Math.round(this.options.maxWidth * ratio) + 'px';
		scale.innerHTML = text;
	},

	_getRoundNum: function (num) {
		var pow10 = Math.pow(10, (Math.floor(num) + '').length - 1),
		    d = num / pow10;

		d = d >= 10 ? 10 :
		    d >= 5 ? 5 :
		    d >= 3 ? 3 :
		    d >= 2 ? 2 : 1;

		return pow10 * d;
	}
});


var scale134 = function (options) {
	return new Scale134(options);
};
[end]


[draw rooms]
var check_sel;
var minimX = 1000000;
var maximX = -1000000;
var che;
var minimY = 1000000;
var maximY = -1000000;
function toColor(num) {
    return '##'  + (+num).toString(16).padStart(6, '0');
}
function getDivProp(div_code){
	let divs = lit.attributes.Departments;
 	for (i in divs){
//		console.log(i+' '+divs[i].id+' '+divs[i].name+' '+divs[i].systemColor);
		if (divs[i].id == div_code) {return divs[i]};
        }
	
	return "";
}
var defaultDivColor = "##eeee00"
function try_colorSQR(){
	let divs = lit.attributes.Departments;
 	for (i in divs){
            let divsqr;
            let sqrid='SQR'+divs[i].id;
            divsqr = document.getElementById(sqrid);
            if ( typeof(divsqr) !== "undefined" && divsqr !== null ) {
                 divsqr.style["background-color"]= toColor(divs[i].systemColor);
                 console.log('COLOR SQR '+sqrid+' '+JSON.stringify(divs[i])+' '+toColor( divs[i].systemColor));
                 console.log(toColor( divs[i].systemColor));
            }
            if (divs[i].id!=='643000'){continue;}
            sqrid='SQR606000';
            divsqr = document.getElementById(sqrid);
            if ( typeof(divsqr) !== "undefined" && divsqr !== null ) {
                 divsqr.style["background-color"]= toColor(divs[i].systemColor);
                 console.log('COLOR SQR '+sqrid+' '+JSON.stringify(divs[i])+' '+toColor( divs[i].systemColor));
                 console.log(toColor( divs[i].systemColor));
            }



		
    }
}





function showSotr(tabn){
 ShowDialog(); AjaxCall('popupCont', 'c=edit/personal&edit=no&tab_n='+tabn, true); ??right_level=333|pers_admin|personal_view
}


function getRoomCoordinates(roomData){
    let roomCoordinates = [];
    for (var j = 0; j < roomData.geometry.coordinates.length; j++) {
      roomCoordinates.push([
        rescaleY(roomData.geometry.coordinates[j][1]),
        rescaleX(roomData.geometry.coordinates[j][0]),
      ]);
    }
    return roomCoordinates;
}
function getRoomInfo(roomID){
    return rooms_info[roomID];
}

        function checki(select) {
        check_sel = -1;
//          console.log(check_sel);
          che = check_sel;
          if (check_sel == -1) {
            che = 0;
          }
          //alert("Вы выбрали " + check_sel + " этаж");
          for (j in lit.layers.Buildings.layerRaws) {
            //                console.log(j);
            if (lit.layers.Buildings.layerRaws[j].geometry.floor == check_sel) {
              var i = lit.layers.Buildings.layerRaws[j];
              //                    console.log(' I = ' + i);

              //                    console.log('floor=' + i.geometry.floor);
              for (coord_num in i.geometry.coordinates) {
//                console.log(
//                  "coord x1=" +
//                    i.geometry.coordinates[coord_num][0] +
//                    " y1=" +
//                    i.geometry.coordinates[coord_num][1]
//                );
                if ((+i.geometry.coordinates[coord_num][0]) > maximX) {
                  maximX = i.geometry.coordinates[coord_num][0];
                }
                if (+i.geometry.coordinates[coord_num][0] < minimX) {
                  minimX = i.geometry.coordinates[coord_num][0];
                }
                if (+i.geometry.coordinates[coord_num][1] > maximY) {
                  maximY = i.geometry.coordinates[coord_num][1];
                }
                if (+i.geometry.coordinates[coord_num][1] < minimY) {
                  minimY = i.geometry.coordinates[coord_num][1];
                }
              }
            }
          }
          console.log("X ", minimX, maximX);
          console.log("Y ", minimY, maximY);
        }



let all_rooms_data = lit.layers.Rooms.layerRaws;
var arr = [];
var rooms_info = {};
for (let i = 0; i < all_rooms_data.length; i++){
    var room_id = all_rooms_data[i].properties.id;
    var room_name = all_rooms_data[i].properties.name.toUpperCase() ;
    var room_floor = all_rooms_data[i].geometry.floor;
    var ppls_arr = []
    for (let j = 0; j < lit_sotr.length; j++){
        let tmprooms = [lit_sotr[j].rooms.trim().toUpperCase()];
        if (lit_sotr[j].rooms.indexOf(',')>-1) {
            tmprooms = lit_sotr[j].rooms.toUpperCase().split(',');
            tmprooms.map(s => s.trim());
        }
        if (  ( lit_sotr[j].rooms.indexOf('403')>-1 ) & (room_name.indexOf('403')>-1 ) )
                      { 
                       console.log('=================================== '+room_name+' '+ tmprooms+' '+ tmprooms.indexOf(room_name));
                       }
        if (tmprooms.indexOf(room_name) > -1){
            let fio = lit_sotr[j].f + " " + lit_sotr[j].i + " " + lit_sotr[j].o;
            ppls_arr.push({"FL_ID":lit_sotr[j].fl_id, "TABN":lit_sotr[j].tabn, "TOPDIVCODE":lit_sotr[j].TopParent_code, "FIO":fio});
        }
    }
    var room_coord = getRoomCoordinates(all_rooms_data[i]);
    var minX = maxX = room_coord[0][0];
    var minY = maxY = room_coord[0][1];
    for (let b = 0; b < room_coord.length; b++){
        if (room_coord[b][0] < minX){
            minX = room_coord[b][0];
        }
        if (room_coord[b][0] > maxX){
            maxX = room_coord[b][0];
        }
        if (room_coord[b][1] < minY){
            minY = room_coord[b][1];
        }
        if (room_coord[b][1] > maxY){
            maxY = room_coord[b][1];
        }
    }
    var square = ((maxX - minX) * (maxY - minY) * 13 * 13) / 100;
    var size = 0;
    rooms_info[room_id] = {"id":room_id, "name":room_name, "floor":room_floor, "PPLS":ppls_arr, "SQR":square, "size":size, "geo_json":room_coord};
    if (room_name.indexOf('607')>-1) {console.log(   room_name+' ===   '+JSON.stringify(rooms_info[room_id]));}
}

var flip = false;
function addRooms() {
  roomsGrp.clearLayers();
  console.log(' 111 addRooms '+roomsGrp +' lit='+ 'JSON.stringify(lit)');
  check_sel = $("input[type='radio'][name='floornum']:checked").val();
  let aaa = $("input[type='radio'][name='floornum']:checked");
  console.log('aaa='+aaa);
  let data = lit.layers.Rooms.layerRaws.filter(function (item, i, arr) {
    if (item.geometry.floor == check_sel) return item;
  });
  console.log(check_sel+' Rooms '+ JSON.stringify(data));
  // let dataFloor = lit.layers.Floors.layerRaws.filter(function (item, i, arr) {
  //   if (item.geometry.floor == check_sel) return item;
  // });
  // let latlngsFloor = [];
  // let aa = dataFloor[0];
  // aa = aa.geometry;
  // aa = aa.coordinates;
  
  // for (var j = 0; j < aa.length; j++) {
  //   latlngsFloor.push([
  //     rescaleY(aa[j][1]),
  //     rescaleX(aa[j][0]),
  //   ]);
  // }
  // polyline = L.polygon(latlngsFloor, {
  //   fillColor: "white",
  //   fillOpacity: 0.2,
  //   color: "black",
  //   weight: 4,
  // });
  // roomsGrp.addLayer(polyline);

  for (var i = 0; i < data.length; i++) {
//     console.log(' Room '+data[i].properties.name+' '+ JSON.stringify(data[i].geometry.coordinates));
    let latlngs = getRoomCoordinates(data[i]);
    var rColor = "#eeeeee";
    // ctx.moveTo(
    //     rescaleX(data[i].geometry.coordinates[0][0]),
    //     rescaleY(data[i].geometry.coordinates[0][1])
    // );
    var roomName = data[i].properties.name;
//    if (roomName in roomOwner) {
//      rColor = ownerColor[roomOwner[roomName]];
//    } else {
//      rColor = ownerColor[roomOwner["default"]];
//    }

    roomsGrp.addLayer(polyline);

    // .addTo(lit_map);
    var descr = "";
    var Owner = "";
    var room_info = getRoomInfo(data[i].properties.id);
    if (roomName != ""){
        var descr = "Комната "+ roomName+"<br>";
//        console.log(latlngs);
        for (let j = 0; j < room_info.PPLS. length; j++){
            descr += "<a href='#' onclick='showSotr(+" + room_info.PPLS[j].TABN + ")';>"+room_info.PPLS[j].FIO + "</a><br>";
            Owner = room_info.PPLS[j].TOPDIVCODE;
//            console.log(roomName+' = '+JSON.stringify(room_info.PPLS[j])+' '+Owner);
        }
        if (Owner != "") {
               descr += "Отдел: " + divFunc(Owner) + "<br>";
               console.log('getDivProp '+JSON.stringify(getDivProp(Owner)));
               rColor = toColor((+getDivProp(Owner).systemColor));
        }
        
    }
        descr += "Площадь: " + parseInt(room_info.SQR)+' кв.м';


    console.log(roomName+' '+rColor)
    polyline = L.polygon(latlngs, {
      fillColor: rColor,
      fillOpacity: 0.9,
      color: "black",
      weight: 1,
    });

    polyline
      .bindTooltip(roomName, {
        permanent: true,
        direction: "center",
        className: "lhep_obj_tooltip",
      })
      .openTooltip();
    polyline.bindPopup(descr, {
      autoPanPaddingTopLeft: [50, 50],
      className: "lhep_obj_popup",
    }).on;
//   console.log(' polyline '+latlngs);
  }
try_colorSQR();
}

function test_room(){
  var latlngs = [
    [1, 1],
    [200, 200],
    [1, 300],
  ];
  polyline = L.polygon(latlngs, {
    fillOpacity: 1,
    color: "red",
    weight: 2,
  }).addTo(lit_map);
}


function rescaleX(x) {
    let aaa = x / 100;
  return parseInt(aaa);
}

function rescaleY(y) {
    let aaa = (minimY - (y - maximY)) / 100;
    return parseInt(aaa);
}


[end]
